#!/usr/bin/env node

/**
 * –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è GDS API 1 —Å –ª–æ–∫–∞–ª—å–Ω—ã–º WSDL
 * –ó–∞–ø—É—Å–∫: node test-gds-api-local.js
 */

const soap = require('soap');
const fs = require('fs');
const path = require('path');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ GDS API
const config = {
  wsdlFile: './gds-api.wsdl',
  url: 'https://cluster.avtovokzal.ru/gdstest/soap/json',
  username: 'sakhbus',
  password: 'Zxvghh4567!'
};

async function testGdsApi() {
  console.log('üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ GDS API 1 (–ª–æ–∫–∞–ª—å–Ω—ã–π WSDL)...');
  console.log('üìÅ WSDL —Ñ–∞–π–ª:', config.wsdlFile);
  console.log('üìç URL:', config.url);
  console.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', config.username);
  console.log('üîë –ü–∞—Ä–æ–ª—å:', config.password ? '***' : '–Ω–µ —É–∫–∞–∑–∞–Ω');
  console.log('');

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ WSDL —Ñ–∞–π–ª–∞
  if (!fs.existsSync(config.wsdlFile)) {
    console.error('‚ùå WSDL —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω:', config.wsdlFile);
    console.log('üí° –°–Ω–∞—á–∞–ª–∞ —Å–∫–∞—á–∞–π—Ç–µ WSDL: curl -u "sakhbus:Zxvghh4567!" "https://cluster.avtovokzal.ru/gdstest/soap/json?wsdl" > gds-api.wsdl');
    return;
  }

  try {
    // –°–æ–∑–¥–∞–µ–º SOAP –∫–ª–∏–µ–Ω—Ç –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ WSDL
    console.log('üîå –°–æ–∑–¥–∞–Ω–∏–µ SOAP –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ WSDL...');
    const wsdlContent = fs.readFileSync(config.wsdlFile, 'utf8');
    const client = await soap.createClientAsync(config.wsdlFile);
    console.log('‚úÖ SOAP –∫–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ');

    // –î–æ–±–∞–≤–ª—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
    console.log('üîê –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏...');
    client.setSecurity(new soap.BasicAuthSecurity(config.username, config.password));
    console.log('‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞');

    // –ü–æ–ª—É—á–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ API
    console.log('üìã –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è API...');
    const description = client.describe();
    const methods = Object.keys(description);
    
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${methods.length} –º–µ—Ç–æ–¥–æ–≤:`);
    methods.forEach((method, index) => {
      console.log(`  ${index + 1}. ${method}`);
    });

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç—ã–µ –º–µ—Ç–æ–¥—ã
    console.log('');
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç—ã—Ö –º–µ—Ç–æ–¥–æ–≤...');
    
    const simpleMethods = [
      {
        name: 'getVersion',
        params: {},
        description: '–ü–æ–ª—É—á–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–∏ API'
      },
      {
        name: 'getCountries',
        params: {},
        description: '–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å—Ç—Ä–∞–Ω'
      },
      {
        name: 'echo',
        params: { message: 'Hello GDS API!' },
        description: '–¢–µ—Å—Ç–æ–≤—ã–π –º–µ—Ç–æ–¥ echo'
      }
    ];
    
    for (const testMethod of simpleMethods) {
      if (methods.includes(testMethod.name)) {
        try {
          console.log(`\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ç–æ–¥–∞: ${testMethod.name}`);
          console.log(`   üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${testMethod.description}`);
          console.log(`   üì• –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:`, testMethod.params);
          
          // –í—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥
          const result = await client[testMethod.name + 'Async'](testMethod.params);
          console.log(`   ‚úÖ –ú–µ—Ç–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ`);
          
          // –ü–∞—Ä—Å–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
          if (result && result[0]) {
            const data = result[0];
            console.log(`   üìä –†–µ–∑—É–ª—å—Ç–∞—Ç:`, JSON.stringify(data, null, 2).substring(0, 400) + '...');
            
            // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
            if (data.return) {
              try {
                const parsedData = JSON.parse(data.return);
                console.log(`   üîç –ü–∞—Ä—Å–∏–Ω–≥ JSON:`, typeof parsedData, Array.isArray(parsedData) ? `(${parsedData.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤)` : '');
              } catch (e) {
                console.log(`   üìù –í–æ–∑–≤—Ä–∞—â–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ –¥–ª–∏–Ω–æ–π:`, data.return.length);
                if (data.return.length < 100) {
                  console.log(`   üìÑ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ:`, data.return);
                }
              }
            }
          } else {
            console.log(`   üìä –†–µ–∑—É–ª—å—Ç–∞—Ç:`, result);
          }
          
        } catch (error) {
          console.log(`   ‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:`, error.message);
          
          // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
          if (error.message.includes('401')) {
            console.log(`   üîê –ü—Ä–æ–±–ª–µ–º–∞ —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π`);
          } else if (error.message.includes('400')) {
            console.log(`   üìù –ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞`);
          } else if (error.message.includes('500')) {
            console.log(`   üñ•Ô∏è –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞`);
          }
        }
      } else {
        console.log(`\n‚ö†Ô∏è –ú–µ—Ç–æ–¥ ${testMethod.name} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      }
    }

    console.log('');
    console.log('üéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
    console.error('üìã –î–µ—Ç–∞–ª–∏:', error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testGdsApi().catch(console.error);
