import { Request, Response } from 'express';
import { Api1Service } from '../services/api1Service';
import { RaceService } from '../services/raceService';
import { Api2Service } from '../services/api2Service';

class BookingController {
  private api1Service: Api1Service;
  private api2Service: Api2Service;
  private raceService: RaceService;

  constructor() {
    this.api1Service = new Api1Service();
    this.api2Service = new Api2Service();
    this.raceService = new RaceService();
    
    // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥—ã –∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
    this.searchRoutes = this.searchRoutes.bind(this);
    this.getAllStations = this.getAllStations.bind(this);
    this.getStationsFrom = this.getStationsFrom.bind(this);
    this.getRouteInfo = this.getRouteInfo.bind(this);
    this.testConnections = this.testConnections.bind(this);
    this.getApiStats = this.getApiStats.bind(this);
  }

  // –¢–µ—Å—Ç–æ–≤—ã–π endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
  async testDemo(req: Request, res: Response) {
    try {
      console.log('üß™ –¢–µ—Å—Ç–æ–≤—ã–π endpoint –≤—ã–∑–≤–∞–Ω');
      
      const demoData = [
        { id: 'test1', name: '–¢–µ—Å—Ç 1' },
        { id: 'test2', name: '–¢–µ—Å—Ç 2' }
      ];

      res.json({
        success: true,
        message: '–¢–µ—Å—Ç–æ–≤—ã–π endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç!',
        data: demoData
      });
    } catch (error) {
      res.status(500).json({
        success: false,
        message: '–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ endpoint',
        error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
      });
    }
  }

  // –ü–æ–∏—Å–∫ –º–∞—Ä—à—Ä—É—Ç–æ–≤
  async searchRoutes(req: Request, res: Response) {
    try {
      const { from, to, date } = req.query;

      if (!from || !to || !date) {
        return res.status(400).json({
          success: false,
          message: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å: from, to, date'
        });
      }

      console.log('üîç –ü–æ–∏—Å–∫ –º–∞—Ä—à—Ä—É—Ç–æ–≤ (–†–ï–ê–õ–¨–ù–´–ï API):', { from, to, date });

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π raceService –¥–ª—è –ø–æ–∏—Å–∫–∞
      const races = await this.raceService.searchRaces({
        from: from as string,
        to: to as string,
        date: date as string
      });

      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${races.length} —Ä–µ–∞–ª—å–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤`);

      res.json({
        success: true,
        data: races,
        sources: {
          api1: 'gds',
          api2: 'paybilet'
        }
      });
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤:', error);
      res.status(500).json({
        success: false,
        message: '–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤',
        error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
      });
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å—Ç–∞–Ω—Ü–∏–π
  async getAllStations(req: Request, res: Response) {
    try {
      console.log('üöâ –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å—Ç–∞–Ω—Ü–∏–π...');

      // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞–Ω—Ü–∏–∏ –∏–∑ –æ–±–æ–∏—Ö API
      const [api1Stations, api2Stations] = await Promise.allSettled([
        this.api1Service.getStations(),
        Promise.resolve([]) // API 2 –ø–æ–∫–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω
      ]);

      const allStations = [
        ...(api1Stations.status === 'fulfilled' ? api1Stations.value : []),
        ...(api2Stations.status === 'fulfilled' ? api2Stations.value : [])
      ];

      console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${allStations.length} —Å—Ç–∞–Ω—Ü–∏–π`);

      res.json({
        success: true,
        data: allStations,
        sources: {
          api1: api1Stations.status === 'fulfilled' ? 'success' : 'error',
          api2: api2Stations.status === 'fulfilled' ? 'success' : 'error'
        }
      });
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞–Ω—Ü–∏–π:', error);
      res.status(500).json({
        success: false,
        message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞–Ω—Ü–∏–π',
        error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
      });
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞–Ω—Ü–∏–π –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
  async getStationsFrom(req: Request, res: Response) {
    try {
      const { from } = req.params;
      console.log('üöâ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞–Ω—Ü–∏–π –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è:', from);

      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—Ç–∞–Ω—Ü–∏–∏
      const allStations = await this.api1Service.getStations();
      
      // –§–∏–ª—å—Ç—Ä—É–µ–º —Å—Ç–∞–Ω—Ü–∏–∏
      const filteredStations = allStations.filter((station: any) => 
        station.id !== from && station.name !== from
      );

      res.json({
        success: true,
        data: filteredStations
      });
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞–Ω—Ü–∏–π –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è:', error);
      res.status(500).json({
        success: false,
        message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞–Ω—Ü–∏–π –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è',
        error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
      });
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–∞—Ä—à—Ä—É—Ç–µ
  async getRouteInfo(req: Request, res: Response) {
    try {
      const { id } = req.params;
      console.log('üìã –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–∞—Ä—à—Ä—É—Ç–µ:', id);

      // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ API 1
      const raceInfo = await this.api1Service.getRaceInfo(id);

      res.json({
        success: true,
        data: raceInfo
      });
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–∞—Ä—à—Ä—É—Ç–µ:', error);
      res.status(500).json({
        success: false,
        message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–∞—Ä—à—Ä—É—Ç–µ',
        error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
      });
    }
  }

  // –¢–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
  async testConnections(req: Request, res: Response) {
    try {
      console.log('üîå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å –≤–Ω–µ—à–Ω–∏–º–∏ API...');

      // –¢–µ—Å—Ç–∏—Ä—É–µ–º GDS API 1
      const api1Test = await this.api1Service.testConnection();
      
      // –¢–µ—Å—Ç–∏—Ä—É–µ–º Paybilet API 2
      const api2Test = await this.api2Service.testConnection();

      const result = {
        api1: {
          status: api1Test.status,
          responseTime: api1Test.responseTime,
          error: api1Test.error,
          methods: api1Test.methods
        },
        api2: api2Test,
        summary: this.getConnectionSummary(api1Test, api2Test)
      };

      console.log('‚úÖ –¢–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω:', result);

      res.json({
        success: true,
        data: result
      });
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π:', error);
      res.status(500).json({
        success: false,
        message: '–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π',
        error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
      });
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ API
  async getApiStats(req: Request, res: Response) {
    try {
      console.log('üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ API...');

      // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
      const api1Test = await this.api1Service.testConnection();
      
      const stats = {
        totalRequests: 0, // TODO: –¥–æ–±–∞–≤–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤
        successRate: api1Test.status ? 100 : 0,
        averageResponseTime: api1Test.responseTime,
        api1: {
          status: api1Test.status,
          lastCheck: new Date().toISOString(),
          responseTime: api1Test.responseTime,
          error: api1Test.error
        },
        api2: {
          status: false,
          lastCheck: new Date().toISOString(),
          responseTime: 0,
          error: 'API 2 –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'
        }
      };

      res.json({
        success: true,
        data: stats
      });
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ API:', error);
      res.status(500).json({
        success: false,
        message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ API',
        error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
      });
    }
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–¥–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
  private getConnectionSummary(api1: any, api2: any): string {
    if (api1.status && api2.status) {
      return '–í—Å–µ API –¥–æ—Å—Ç—É–ø–Ω—ã';
    } else if (api1.status || api2.status) {
      return '–ß–∞—Å—Ç–∏—á–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã';
    } else {
      return '–í—Å–µ API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã';
    }
  }
}

export const bookingController = new BookingController();
