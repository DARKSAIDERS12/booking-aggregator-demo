import { Request, Response } from 'express';
import { AggregatorService } from '../services/aggregatorService';
import StrapiService from '../services/strapiService';
import StationGroupingService from '../services/stationGroupingService';

export class BookingController {
  private aggregator: AggregatorService;
  private strapi: StrapiService;
  private stationGrouping: StationGroupingService;

  constructor() {
    this.aggregator = new AggregatorService();
    this.strapi = new StrapiService();
    this.stationGrouping = new StationGroupingService(this.strapi);
  }

  // –ü–æ–∏—Å–∫ –º–∞—Ä—à—Ä—É—Ç–æ–≤
  async searchRoutes(req: Request, res: Response): Promise<void> {
    try {
      const { from, to, date } = req.query;

      if (!from || !to || !date) {
        res.status(400).json({
          success: false,
          message: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: from, to, date'
        });
        return;
      }

      console.log(`üîç –ü–æ–∏—Å–∫ –º–∞—Ä—à—Ä—É—Ç–æ–≤: ${from} ‚Üí ${to} –Ω–∞ ${date}`);

      const routes = await this.aggregator.searchRoutes({
        from: from as string,
        to: to as string,
        date: date as string
      });

      if (routes.length === 0) {
        res.json({
          success: true,
          message: '–ú–∞—Ä—à—Ä—É—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã',
          data: []
        });
        return;
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã –≤ Strapi
      const savedRoutes = [];
      for (const route of routes) {
        try {
          const savedRoute = await this.strapi.createRoute({
            id: 0, // –ë—É–¥–µ—Ç –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–Ω–æ Strapi
            departure_time: route.departureTime,
            arrival_time: route.arrivalTime,
            price: route.price,
            currency: 'RUB', // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
            carrier: route.carrier,
            route_code: route.id,
            data_source: route.source || 'Unknown',
            route_status: 'active',
            seats_available: route.availableSeats,
            from_station: 0, // –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –ø–æ–∑–∂–µ
            to_station: 0
          });
          savedRoutes.push(savedRoute);
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞ –≤ Strapi:', error);
        }
      }

      res.json({
        success: true,
        message: `–ù–∞–π–¥–µ–Ω–æ ${routes.length} –º–∞—Ä—à—Ä—É—Ç–æ–≤`,
        data: {
          routes: routes,
          saved_routes: savedRoutes
        }
      });

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤:', error);
      res.status(500).json({
        success: false,
        message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
        error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
      });
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å—Ç–∞–Ω—Ü–∏–π
  async getAllStations(req: Request, res: Response): Promise<void> {
    try {
      const stations = await this.aggregator.getAllStations();
      
      res.json({
        success: true,
        message: `–ù–∞–π–¥–µ–Ω–æ ${stations.length} —Å—Ç–∞–Ω—Ü–∏–π`,
        data: stations
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞–Ω—Ü–∏–π:', error);
      res.status(500).json({
        success: false,
        message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
        error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
      });
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞–Ω—Ü–∏–π –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é
  async getStationsFrom(req: Request, res: Response): Promise<void> {
    try {
      const { from } = req.params;
      
      if (!from) {
        res.status(400).json({
          success: false,
          message: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä from'
        });
        return;
      }

      const stations = await this.aggregator.getStationsFrom(from);
      
      res.json({
        success: true,
        message: `–ù–∞–π–¥–µ–Ω–æ ${stations.length} —Å—Ç–∞–Ω—Ü–∏–π –æ—Ç ${from}`,
        data: stations
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞–Ω—Ü–∏–π –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é:', error);
      res.status(500).json({
        success: false,
        message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
        error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
      });
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–∞—Ä—à—Ä—É—Ç–µ
  async getRaceInfo(req: Request, res: Response): Promise<void> {
    try {
      const { raceId } = req.params;
      
      if (!raceId) {
        res.status(400).json({
          success: false,
          message: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å ID –º–∞—Ä—à—Ä—É—Ç–∞'
        });
        return;
      }

      const raceInfo = await this.aggregator.getRouteInfo(raceId);
      
      if (!raceInfo) {
        res.status(404).json({
          success: false,
          message: '–ú–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'
        });
        return;
      }

      res.json({
        success: true,
        message: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞—Ä—à—Ä—É—Ç–µ –ø–æ–ª—É—á–µ–Ω–∞',
        data: raceInfo
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–∞—Ä—à—Ä—É—Ç–µ:', error);
      res.status(500).json({
        success: false,
        message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
        error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
      });
    }
  }

  // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
  async testConnections(req: Request, res: Response): Promise<void> {
    try {
      const connections = await this.aggregator.testConnections();
      
      res.json({
        success: true,
        message: '–°—Ç–∞—Ç—É—Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –ø–æ–ª—É—á–µ–Ω',
        data: connections
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π:', error);
      res.status(500).json({
        success: false,
        message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
        error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
      });
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ API
  async getApiStats(req: Request, res: Response): Promise<void> {
    try {
      const stats = await this.aggregator.getApiStats();
      
      res.json({
        success: true,
        message: '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ API –ø–æ–ª—É—á–µ–Ω–∞',
        data: stats
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ API:', error);
      res.status(500).json({
        success: false,
        message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
        error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
      });
    }
  }

  // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–∫–∞–∑–∞
  async registerOrder(req: Request, res: Response): Promise<void> {
    try {
      const { customer_name, customer_phone, customer_email, route_id, total_amount, currency } = req.body;

      if (!customer_name || !route_id || !total_amount || !currency) {
        res.status(400).json({
          success: false,
          message: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å: customer_name, route_id, total_amount, currency'
        });
        return;
      }

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞
      const orderNumber = `ORD-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;

      const orderData = {
        order_number: orderNumber,
        customer_name,
        customer_phone: customer_phone || '',
        customer_email: customer_email || '',
        status: 'pending' as const,
        total_amount: parseFloat(total_amount),
        currency: currency as 'RUB' | 'KZT' | 'USD',
        route: parseInt(route_id)
      };

      const order = await this.strapi.createOrder(orderData);

      res.json({
        success: true,
        message: '–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω',
        data: order
      });

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∑–∞–∫–∞–∑–∞:', error);
      res.status(500).json({
        success: false,
        message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
        error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
      });
    }
  }

  // –û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞
  async payOrder(req: Request, res: Response): Promise<void> {
    try {
      const { order_id, payment_method, payment_details } = req.body;

      if (!order_id || !payment_method) {
        res.status(400).json({
          success: false,
          message: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å: order_id, payment_method'
        });
        return;
      }

      // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π
      // –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
      const paymentId = `PAY-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;

      const updatedOrder = await this.strapi.updateOrder(parseInt(order_id), {
        status: 'paid',
        payment_id: paymentId
      });

      if (!updatedOrder) {
        res.status(404).json({
          success: false,
          message: '–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω'
        });
        return;
      }

      res.json({
        success: true,
        message: '–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω',
        data: {
          order: updatedOrder,
          payment_id: paymentId
        }
      });

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–ø–ª–∞—Ç—ã –∑–∞–∫–∞–∑–∞:', error);
      res.status(500).json({
        success: false,
        message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
        error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
      });
    }
  }

  // –û—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞
  async cancelOrder(req: Request, res: Response): Promise<void> {
    try {
      const { order_id, reason } = req.body;

      if (!order_id) {
        res.status(400).json({
          success: false,
          message: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å: order_id'
        });
        return;
      }

      const updatedOrder = await this.strapi.updateOrder(parseInt(order_id), {
        status: 'canceled'
      });

      if (!updatedOrder) {
        res.status(404).json({
          success: false,
          message: '–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω'
        });
        return;
      }

      res.json({
        success: true,
        message: '–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω',
        data: updatedOrder
      });

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞:', error);
      res.status(500).json({
        success: false,
        message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
        error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
      });
    }
  }

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —Å—Ç–∞–Ω—Ü–∏–π
  async autoGroupStations(req: Request, res: Response): Promise<void> {
    try {
      console.log('üöÄ –ó–∞–ø—Ä–æ—Å –Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫—É —Å—Ç–∞–Ω—Ü–∏–π');
      
      const groups = await this.stationGrouping.autoGroupStations();
      
      res.json({
        success: true,
        message: `–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –°–æ–∑–¥–∞–Ω–æ ${groups.length} –≥—Ä—É–ø–ø`,
        data: groups
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ —Å—Ç–∞–Ω—Ü–∏–π:', error);
      res.status(500).json({
        success: false,
        message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
        error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
      });
    }
  }

  // –†—É—á–Ω–∞—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —Å—Ç–∞–Ω—Ü–∏–π
  async manualGroupStations(req: Request, res: Response): Promise<void> {
    try {
      const { station_ids, group_name } = req.body;

      if (!station_ids || !Array.isArray(station_ids) || !group_name) {
        res.status(400).json({
          success: false,
          message: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å: station_ids (–º–∞—Å—Å–∏–≤), group_name'
        });
        return;
      }

      const group = await this.stationGrouping.manualGroupStations(station_ids, group_name);
      
      res.json({
        success: true,
        message: '–†—É—á–Ω–∞—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —Å—Ç–∞–Ω—Ü–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞',
        data: group
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Ä—É—á–Ω–æ–π –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ —Å—Ç–∞–Ω—Ü–∏–π:', error);
      res.status(500).json({
        success: false,
        message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
        error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
      });
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –≥—Ä—É–ø–ø —Å—Ç–∞–Ω—Ü–∏–π
  async getStationGroups(req: Request, res: Response): Promise<void> {
    try {
      const groups = await this.stationGrouping.getGroupedStations();
      
      res.json({
        success: true,
        message: `–ù–∞–π–¥–µ–Ω–æ ${groups.length} –≥—Ä—É–ø–ø —Å—Ç–∞–Ω—Ü–∏–π`,
        data: groups
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥—Ä—É–ø–ø —Å—Ç–∞–Ω—Ü–∏–π:', error);
      res.status(500).json({
        success: false,
        message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
        error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
      });
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≥—Ä—É–ø–ø—ã —Å—Ç–∞–Ω—Ü–∏–π
  async getStationGroup(req: Request, res: Response): Promise<void> {
    try {
      const { id } = req.params;
      
      if (!id) {
        res.status(400).json({
          success: false,
          message: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å ID –≥—Ä—É–ø–ø—ã'
        });
        return;
      }

      const group = await this.stationGrouping.getStationGroupDetails(parseInt(id));
      
      if (!group) {
        res.status(404).json({
          success: false,
          message: '–ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
        });
        return;
      }

      res.json({
        success: true,
        message: '–ì—Ä—É–ø–ø–∞ —Å—Ç–∞–Ω—Ü–∏–π –Ω–∞–π–¥–µ–Ω–∞',
        data: group
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã —Å—Ç–∞–Ω—Ü–∏–π:', error);
      res.status(500).json({
        success: false,
        message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
        error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
      });
    }
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã —Å—Ç–∞–Ω—Ü–∏–π
  async updateStationGroup(req: Request, res: Response): Promise<void> {
    try {
      const { id } = req.params;
      const updateData = req.body;
      
      if (!id) {
        res.status(400).json({
          success: false,
          message: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å ID –≥—Ä—É–ø–ø—ã'
        });
        return;
      }

      const updatedGroup = await this.strapi.updateStationGroup(parseInt(id), updateData);
      
      if (!updatedGroup) {
        res.status(404).json({
          success: false,
          message: '–ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
        });
        return;
      }

      res.json({
        success: true,
        message: '–ì—Ä—É–ø–ø–∞ —Å—Ç–∞–Ω—Ü–∏–π —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞',
        data: updatedGroup
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã —Å—Ç–∞–Ω—Ü–∏–π:', error);
      res.status(500).json({
        success: false,
        message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
        error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
      });
    }
  }

  // –£–¥–∞–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã —Å—Ç–∞–Ω—Ü–∏–π
  async deleteStationGroup(req: Request, res: Response): Promise<void> {
    try {
      const { id } = req.params;
      
      if (!id) {
        res.status(400).json({
          success: false,
          message: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å ID –≥—Ä—É–ø–ø—ã'
        });
        return;
      }

      // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã
      // –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—Ö
      
      res.json({
        success: true,
        message: '–ì—Ä—É–ø–ø–∞ —Å—Ç–∞–Ω—Ü–∏–π —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞',
        data: { id: parseInt(id) }
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã —Å—Ç–∞–Ω—Ü–∏–π:', error);
      res.status(500).json({
        success: false,
        message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
        error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
      });
    }
  }

  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏
  async getGroupingStats(req: Request, res: Response): Promise<void> {
    try {
      const groups = await this.stationGrouping.getGroupedStations();
      const api1Stations = await this.strapi.getApi1Stations();
      const api2Stations = await this.strapi.getApi2Stations();
      
      const stats = {
        total_groups: groups.length,
        total_api1_stations: api1Stations.length,
        total_api2_stations: api2Stations.length,
        total_mappings: 0,
        automatic_mappings: 0,
        manual_mappings: 0
      };

      // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è–º
      const mappings = await this.strapi.getStationMappings();
      stats.total_mappings = mappings.length;
      
      for (const mapping of mappings) {
        if (mapping.attributes?.mapping_type === 'automatic') {
          stats.automatic_mappings++;
        } else if (mapping.attributes?.mapping_type === 'manual') {
          stats.manual_mappings++;
        }
      }
      
      res.json({
        success: true,
        message: '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—É—á–µ–Ω–∞',
        data: stats
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏:', error);
      res.status(500).json({
        success: false,
        message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
        error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
      });
    }
  }
}

export default BookingController;
