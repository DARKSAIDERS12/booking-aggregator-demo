import { Request, Response } from 'express';
import { RaceService } from '../services/raceService';

class RaceController {
    private raceService: RaceService;

    constructor() {
        this.raceService = new RaceService();
        
        // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥—ã –∫ —ç–∫–∑–µ–º–ø–ª—è—Ä—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ this
        this.searchRaces = this.searchRaces.bind(this);
        this.getRaceInfo = this.getRaceInfo.bind(this);
        this.getAllRaces = this.getAllRaces.bind(this);
    }

    // –ü–æ–∏—Å–∫ —Ä–µ–π—Å–æ–≤ –ø–æ –º–∞—Ä—à—Ä—É—Ç—É
    async searchRaces(req: Request, res: Response) {
        try {
            const { from, to, date } = req.query;

            if (!from || !to || !date) {
                return res.status(400).json({
                    success: false,
                    message: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å: from, to, date'
                });
            }

            console.log('üîç –ü–æ–∏—Å–∫ —Ä–µ–π—Å–æ–≤ (–î–ï–ú–û):', { from, to, date });

            // –î–ï–ú–û –î–ê–ù–ù–´–ï –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            const demoRaces = [
                {
                    id: 'demo_001',
                    from: from as string,
                    to: to as string,
                    departureTime: `${date}T08:00:00.000Z`,
                    arrivalTime: `${date}T12:30:00.000Z`,
                    duration: '4—á 30–º',
                    price: 1500,
                    currency: '—Ä—É–±',
                    availableSeats: 25,
                    carrier: '–°–∞—Ö–∞–ª–∏–Ω–∞–≤—Ç–æ—Ç—Ä–∞–Ω—Å',
                    source: 'api1',
                    sourceId: 'gds_demo_001'
                },
                {
                    id: 'demo_002',
                    from: from as string,
                    to: to as string,
                    departureTime: `${date}T14:15:00.000Z`,
                    arrivalTime: `${date}T18:45:00.000Z`,
                    duration: '4—á 30–º',
                    price: 1650,
                    currency: '—Ä—É–±',
                    availableSeats: 12,
                    carrier: '–û—Å—Ç—Ä–æ–≤–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–∑–∫–∏',
                    source: 'api2',
                    sourceId: 'paybilet_demo_002'
                },
                {
                    id: 'demo_003',
                    from: from as string,
                    to: to as string,
                    departureTime: `${date}T16:30:00.000Z`,
                    arrivalTime: `${date}T21:00:00.000Z`,
                    duration: '4—á 30–º',
                    price: 1400,
                    currency: '—Ä—É–±',
                    availableSeats: 8,
                    carrier: '–≠–∫—Å–ø—Ä–µ—Å—Å-–°–∞—Ö–∞–ª–∏–Ω',
                    source: 'api1',
                    sourceId: 'gds_demo_003'
                }
            ];

            console.log(`‚úÖ –í–æ–∑–≤—Ä–∞—â–∞—é ${demoRaces.length} –¥–µ–º–æ-—Ä–µ–π—Å–æ–≤`);

            res.json({
                success: true,
                data: {
                    from,
                    to,
                    date,
                    races: demoRaces
                }
            });
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ä–µ–π—Å–æ–≤:', error);
            res.status(500).json({
                success: false,
                message: '–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ä–µ–π—Å–æ–≤',
                error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
            });
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º —Ä–µ–π—Å–µ
    async getRaceInfo(req: Request, res: Response) {
        try {
            const { id } = req.params;

            if (!id) {
                return res.status(400).json({
                    success: false,
                    message: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å ID —Ä–µ–π—Å–∞'
                });
            }

            const raceInfo = await this.raceService.getRaceInfo(id);

            if (!raceInfo) {
                return res.status(404).json({
                    success: false,
                    message: '–†–µ–π—Å –Ω–µ –Ω–∞–π–¥–µ–Ω'
                });
            }

            res.json({
                success: true,
                data: raceInfo
            });
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ–π—Å–µ:', error);
            res.status(500).json({
                success: false,
                message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ–π—Å–µ',
                error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
            });
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ–π—Å–æ–≤
    async getAllRaces(req: Request, res: Response) {
        try {
            const races = await this.raceService.getAllRaces();

            res.json({
                success: true,
                data: races
            });
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —Ä–µ–π—Å–æ–≤:', error);
            res.status(500).json({
                success: false,
                message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —Ä–µ–π—Å–æ–≤',
                error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
            });
        }
    }
}

export const raceController = new RaceController();
