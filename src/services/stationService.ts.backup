import { Api1Service } from './api1Service';
import { Api2Service } from './api2Service';
import StrapiService from './strapiService';

export interface Station {
    id: string;
    name: string;
    code?: string;
    city?: string;
    region?: string;
    country?: string;
    coordinates?: {
        lat: number;
        lng: number;
    };
    source: 'api1' | 'api2';
    sourceId: string;
}

export interface StationMapping {
    id: string;
    api1_station?: Station;
    api2_station?: Station;
    display_name: string;
    is_auto_mapped: boolean;
    created_at: string;
}

export interface StationGroup {
    id: string;
    name: string;
    main_station: Station;
    child_stations: Station[];
    description?: string;
    created_at: string;
}

export class StationService {
    private strapiService: StrapiService;
    private api1Service: Api1Service;
    private api2Service: Api2Service;

    constructor() {
        console.log('StationService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        this.strapiService = new StrapiService();
        this.api1Service = new Api1Service();
        this.api2Service = new Api2Service();
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å—Ç–∞–Ω—Ü–∏–π
    async getAllStations(): Promise<Station[]> {
        try {
            console.log('üöâ –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å—Ç–∞–Ω—Ü–∏–π...');
            
            // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞–Ω—Ü–∏–∏ –∏–∑ Strapi CMS
            const api1Stations = await this.strapiService.getApi1Stations();
            const api2Stations = await this.strapiService.getApi2Stations();
            
            console.log(`üìç –ü–æ–ª—É—á–µ–Ω–æ ${api1Stations.length} —Å—Ç–∞–Ω—Ü–∏–π –∏–∑ API 1`);
            console.log(`üìç –ü–æ–ª—É—á–µ–Ω–æ ${api2Stations.length} —Å—Ç–∞–Ω—Ü–∏–π –∏–∑ API 2`);
            
            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –µ–¥–∏–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
            const stations: Station[] = [];
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω—Ü–∏–∏ API 1
            if (api1Stations && Array.isArray(api1Stations)) {
                api1Stations.forEach((station: any) => {
                    if (station.attributes) {
                        stations.push({
                            id: `api1_${station.id}`,
                            name: station.attributes.name || station.attributes.station_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
                            code: station.attributes.code || station.attributes.station_code,
                            city: station.attributes.city || station.attributes.station_city,
                            region: station.attributes.region || station.attributes.station_region,
                            country: station.attributes.country || station.attributes.station_country || '–†–æ—Å—Å–∏—è',
                            coordinates: station.attributes.coordinates || {
                                lat: station.attributes.latitude || 0,
                                lng: station.attributes.longitude || 0
                            },
                            source: 'api1' as const,
                            sourceId: `api1_${station.id}`
                        });
                    }
                });
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω—Ü–∏–∏ API 2
            if (api2Stations && Array.isArray(api2Stations)) {
                api2Stations.forEach((station: any) => {
                    if (station.attributes) {
                        stations.push({
                            id: `api2_${station.id}`,
                            name: station.attributes.name || station.attributes.station_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
                            code: station.attributes.code || station.attributes.station_code,
                            city: station.attributes.city || station.attributes.station_city,
                            region: station.attributes.region || station.attributes.station_region,
                            country: station.attributes.country || station.attributes.station_country || '–†–æ—Å—Å–∏—è',
                            coordinates: {
                                lat: station.attributes.latitude || station.attributes.lat || 0,
                                lng: station.attributes.longitude || station.attributes.lng || 0
                            },
                            source: 'api2' as const,
                            sourceId: `api2_${station.id}`
                        });
                    }
                });
            }
            
            // –ï—Å–ª–∏ –≤ Strapi –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            if (stations.length === 0) {
                console.log('‚ö†Ô∏è –í Strapi –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ');
                const testStations: Station[] = [
                    {
                        id: 'gds_1',
                        name: '–Æ–∂–Ω–æ-–°–∞—Ö–∞–ª–∏–Ω—Å–∫',
                        code: 'YSS',
                        city: '–Æ–∂–Ω–æ-–°–∞—Ö–∞–ª–∏–Ω—Å–∫',
                        region: '–°–∞—Ö–∞–ª–∏–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å',
                        country: '–†–æ—Å—Å–∏—è',
                        coordinates: { lat: 46.9641, lng: 142.7380 },
                        source: 'api1' as const,
                        sourceId: 'api1_gds_1'
                    },
                    {
                        id: 'gds_2',
                        name: '–•–æ–ª–º—Å–∫',
                        code: 'KHM',
                        city: '–•–æ–ª–º—Å–∫',
                        region: '–°–∞—Ö–∞–ª–∏–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å',
                        country: '–†–æ—Å—Å–∏—è',
                        coordinates: { lat: 47.0406, lng: 142.0416 },
                        source: 'api1' as const,
                        sourceId: 'api1_gds_2'
                    },
                    {
                        id: 'pb_1',
                        name: '–Æ–∂–Ω–æ-–°–∞—Ö–∞–ª–∏–Ω—Å–∫',
                        code: 'YSS',
                        city: '–Æ–∂–Ω–æ-–°–∞—Ö–∞–ª–∏–Ω—Å–∫',
                        region: '–°–∞—Ö–∞–ª–∏–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å',
                        country: '–†–æ—Å—Å–∏—è',
                        coordinates: { lat: 46.9641, lng: 142.7380 },
                        source: 'api2' as const,
                        sourceId: 'api2_pb_1'
                    },
                    {
                        id: 'pb_2',
                        name: '–•–æ–ª–º—Å–∫',
                        code: 'KHM',
                        city: '–•–æ–ª–º—Å–∫',
                        region: '–°–∞—Ö–∞–ª–∏–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å',
                        country: '–†–æ—Å—Å–∏—è',
                        coordinates: { lat: 47.0406, lng: 142.0416 },
                        source: 'api2' as const,
                        sourceId: 'api2_pb_2'
                    },
                    {
                        id: 'pb_3',
                        name: '–ö–æ—Ä—Å–∞–∫–æ–≤',
                        code: 'KRS',
                        city: '–ö–æ—Ä—Å–∞–∫–æ–≤',
                        region: '–°–∞—Ö–∞–ª–∏–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å',
                        country: '–†–æ—Å—Å–∏—è',
                        coordinates: { lat: 46.6333, lng: 142.7667 },
                        source: 'api2' as const,
                        sourceId: 'api2_pb_3'
                    }
                ];
                return testStations;
            }
            
            console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${stations.length} —Å—Ç–∞–Ω—Ü–∏–π`);
            return stations;
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —Å—Ç–∞–Ω—Ü–∏–π:', error);
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            return [
                {
                    id: 'gds_1',
                    name: '–Æ–∂–Ω–æ-–°–∞—Ö–∞–ª–∏–Ω—Å–∫',
                    code: 'YSS',
                    city: '–Æ–∂–Ω–æ-–°–∞—Ö–∞–ª–∏–Ω—Å–∫',
                    region: '–°–∞—Ö–∞–ª–∏–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å',
                    country: '–†–æ—Å—Å–∏—è',
                    coordinates: { lat: 46.9641, lng: 142.7380 },
                    source: 'api1' as const,
                    sourceId: 'api1_gds_1'
                },
                {
                    id: 'gds_2',
                    name: '–•–æ–ª–º—Å–∫',
                    code: 'KHM',
                    city: '–•–æ–ª–º—Å–∫',
                    region: '–°–∞—Ö–∞–ª–∏–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å',
                    country: '–†–æ—Å—Å–∏—è',
                    coordinates: { lat: 47.0406, lng: 142.0416 },
                    source: 'api1' as const,
                    sourceId: 'api1_gds_2'
                }
            ];
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞–Ω—Ü–∏–π –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—Ç–∞–Ω—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    async getStationsFrom(fromStationId: string): Promise<Station[]> {
        try {
            console.log('–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞–Ω—Ü–∏–π –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Å—Ç–∞–Ω—Ü–∏–∏:', fromStationId);
            
            const allStations = await this.getAllStations();
            const destinationStations = allStations.filter(station => 
                station.sourceId !== fromStationId && 
                station.id !== fromStationId
            );

            console.log(`–ù–∞–π–¥–µ–Ω–æ ${destinationStations.length} —Å—Ç–∞–Ω—Ü–∏–π –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è`);
            return destinationStations;

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞–Ω—Ü–∏–π –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è:', error);
            throw error;
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–π —Å—Ç–∞–Ω—Ü–∏–π (–∑–∞–≥–ª—É—à–∫–∞)
    async getStationMappings(): Promise<StationMapping[]> {
        try {
            console.log('–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–π —Å—Ç–∞–Ω—Ü–∏–π...');
            return [];
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–π —Å—Ç–∞–Ω—Ü–∏–π:', error);
            return [];
        }
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞–Ω—Ü–∏–π (–∑–∞–≥–ª—É—à–∫–∞)
    async createStationMapping(mappingData: any): Promise<any> {
        try {
            console.log('–°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞–Ω—Ü–∏–π:', mappingData);
            return {
                id: `mapping_${Date.now()}`,
                ...mappingData,
                created_at: new Date().toISOString()
            };
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞–Ω—Ü–∏–π:', error);
            throw error;
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –≥—Ä—É–ø–ø —Å—Ç–∞–Ω—Ü–∏–π (–∑–∞–≥–ª—É—à–∫–∞)
    async getStationGroups(): Promise<StationGroup[]> {
        try {
            console.log('–ü–æ–ª—É—á–µ–Ω–∏–µ –≥—Ä—É–ø–ø —Å—Ç–∞–Ω—Ü–∏–π...');
            return [];
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥—Ä—É–ø–ø —Å—Ç–∞–Ω—Ü–∏–π:', error);
            return [];
        }
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã —Å—Ç–∞–Ω—Ü–∏–π (–∑–∞–≥–ª—É—à–∫–∞)
    async createStationGroup(groupData: any): Promise<any> {
        try {
            console.log('–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã —Å—Ç–∞–Ω—Ü–∏–π:', groupData);
            return {
                id: `group_${Date.now()}`,
                ...groupData,
                created_at: new Date().toISOString()
            };
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã —Å—Ç–∞–Ω—Ü–∏–π:', error);
            throw error;
        }
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã —Å—Ç–∞–Ω—Ü–∏–π (–∑–∞–≥–ª—É—à–∫–∞)
    async updateStationGroup(groupId: string, updateData: any): Promise<any> {
        try {
            console.log('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã —Å—Ç–∞–Ω—Ü–∏–π:', groupId, updateData);
            return {
                id: groupId,
                ...updateData,
                updated_at: new Date().toISOString()
            };
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã —Å—Ç–∞–Ω—Ü–∏–π:', error);
            throw error;
        }
    }

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞–Ω—Ü–∏–π
    async autoMapStations(): Promise<StationMapping[]> {
        try {
            console.log('–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞–Ω—Ü–∏–π...');
            
            // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
            return [];
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞–Ω—Ü–∏–π:', error);
            throw error;
        }
    }
}
