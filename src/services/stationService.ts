import StrapiService from './strapiService';
import { Api1Service } from './api1Service';
import { Api2Service } from './api2Service';

export interface Station {
    id: string;
    name: string;
    code: string;
    city: string;
    region: string;
    country: string;
    coordinates: {
        lat: number;
        lng: number;
    };
    source: 'api1' | 'api2';
    sourceId: string;
}

export interface StationMapping {
    id: string;
    api1_station_id?: string;
    api2_station_id?: string;
    created_date: string;
}

export interface StationGroup {
    id: string;
    name: string;
    main_station_id: string;
    child_station_ids: string[];
    created_at: string;
}

export class StationService {
    private strapiService: StrapiService;
    private api1Service: Api1Service;
    private api2Service: Api2Service;

    constructor() {
        this.strapiService = new StrapiService();
        this.api1Service = new Api1Service();
        this.api2Service = new Api2Service();
        console.log('StationService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å—Ç–∞–Ω—Ü–∏–π
    async getAllStations(): Promise<Station[]> {
        try {
            console.log('üöâ –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å—Ç–∞–Ω—Ü–∏–π...');
            
            // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞–Ω—Ü–∏–∏ –∏–∑ Strapi
            console.log('üîß StrapiService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω:', !!this.strapiService);
            
            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤—ã–∑—ã–≤–∞–µ–º Strapi
            console.log('üîß –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤—ã–∑—ã–≤–∞–µ–º Strapi...');
            
            const api1Stations: any = await this.strapiService.getApi1Stations();
            console.log('üì° –í—ã–∑—ã–≤–∞–µ–º StrapiService.getApi1Stations()...');
            console.log('üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ api1Stations:', JSON.stringify(api1Stations, null, 2));
            
            const api2Stations: any = await this.strapiService.getApi2Stations();
            console.log('üì° –í—ã–∑—ã–≤–∞–µ–º StrapiService.getApi2Stations()...');
            console.log('üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ api2Stations:', JSON.stringify(api2Stations, null, 2));
            
            // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å—Ç–∞–Ω—Ü–∏–∏
            const stations: Station[] = [];
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω—Ü–∏–∏ –∏–∑ API1
            if (api1Stations && api1Stations.data && Array.isArray(api1Stations.data)) {
                api1Stations.data.forEach((station: any) => {
                    if (station && station.name) {
                        stations.push({
                            id: station.station_id || station.id || `api1_${Date.now()}_${Math.random()}`,
                            name: station.name,
                            code: station.code || station.name.substring(0, 3).toUpperCase(),
                            city: station.name, // –í Strapi –Ω–µ—Ç –ø–æ–ª—è city, –∏—Å–ø–æ–ª—å–∑—É–µ–º name
                            region: station.region || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
                            country: station.country || '–†–æ—Å—Å–∏—è',
                            coordinates: station.coordinates || { lat: 0, lng: 0 },
                            source: 'api1' as const,
                            sourceId: `api1_${station.station_id || station.id || station.name}`
                        });
                    }
                });
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω—Ü–∏–∏ –∏–∑ API2
            if (api2Stations && api2Stations.data && Array.isArray(api2Stations.data)) {
                api2Stations.data.forEach((station: any) => {
                    if (station && station.name) {
                        stations.push({
                            id: station.station_id || station.id || `api2_${Date.now()}_${Math.random()}`,
                            name: station.name,
                            code: station.code || station.name.substring(0, 3).toUpperCase(),
                            city: station.name, // –í Strapi –Ω–µ—Ç –ø–æ–ª—è city, –∏—Å–ø–æ–ª—å–∑—É–µ–º name
                            region: station.region || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
                            country: station.country || '–†–æ—Å—Å–∏—è',
                            coordinates: station.coordinates || { lat: 0, lng: 0 },
                            source: 'api2' as const,
                            sourceId: `api2_${station.station_id || station.id || station.name}`
                        });
                    }
                });
            }
            
            // –ï—Å–ª–∏ –≤ Strapi –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
            if (stations.length === 0) {
                console.log('‚ö†Ô∏è –í Strapi –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤');
                return [];
            }
            
            console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${stations.length} —Å—Ç–∞–Ω—Ü–∏–π`);
            return stations;
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —Å—Ç–∞–Ω—Ü–∏–π:', error);
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            return [];
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞–Ω—Ü–∏–π –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—Ç–∞–Ω—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    async getStationsFrom(fromStationId: string): Promise<Station[]> {
        try {
            console.log('üöâ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞–Ω—Ü–∏–π –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Å—Ç–∞–Ω—Ü–∏–∏:', fromStationId);
            
            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—Ç–∞–Ω—Ü–∏–∏
            const allStations = await this.getAllStations();
            
            // –§–∏–ª—å—Ç—Ä—É–µ–º —Å—Ç–∞–Ω—Ü–∏–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è (–∏—Å–∫–ª—é—á–∞–µ–º —Å—Ç–∞–Ω—Ü–∏—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è)
            const destinationStations = allStations.filter(station => 
                station.id !== fromStationId && station.source !== 'api1'
            );
            
            console.log(`–ù–∞–π–¥–µ–Ω–æ ${destinationStations.length} —Å—Ç–∞–Ω—Ü–∏–π –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è`);
            return destinationStations;
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞–Ω—Ü–∏–π –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è:', error);
            return [];
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–π —Å—Ç–∞–Ω—Ü–∏–π
    async getStationMappings(): Promise<StationMapping[]> {
        try {
            const mappings = await this.strapiService.getStationMappings();
            return mappings || [];
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–π —Å—Ç–∞–Ω—Ü–∏–π:', error);
            return [];
        }
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞–Ω—Ü–∏–π
    async createStationMapping(mappingData: Partial<StationMapping>): Promise<StationMapping> {
        try {
            const mapping = await this.strapiService.createStationMapping(mappingData);
            return mapping;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–π —Å—Ç–∞–Ω—Ü–∏–π:', error);
            throw error;
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –≥—Ä—É–ø–ø —Å—Ç–∞–Ω—Ü–∏–π
    async getStationGroups(): Promise<StationGroup[]> {
        try {
            const groups = await this.strapiService.getStationGroups();
            return groups || [];
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥—Ä—É–ø–ø —Å—Ç–∞–Ω—Ü–∏–π:', error);
            throw error;
        }
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã —Å—Ç–∞–Ω—Ü–∏–π
    async createStationGroup(name: string, mainStationId: string, childStationIds: string[]): Promise<any> {
        try {
            console.log(`üèóÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã —Å—Ç–∞–Ω—Ü–∏–π: ${name}`);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≥–ª–∞–≤–Ω–∞—è —Å—Ç–∞–Ω—Ü–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            const allStations = await this.getAllStations();
            const mainStation = allStations.find(s => s.id === mainStationId);
            
            if (!mainStation) {
                throw new Error(`–ì–ª–∞–≤–Ω–∞—è —Å—Ç–∞–Ω—Ü–∏—è —Å ID ${mainStationId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–æ—á–µ—Ä–Ω–∏–µ —Å—Ç–∞–Ω—Ü–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
            for (const childId of childStationIds) {
                const childStation = allStations.find(s => s.id === childId);
                if (!childStation) {
                    throw new Error(`–î–æ—á–µ—Ä–Ω—è—è —Å—Ç–∞–Ω—Ü–∏—è —Å ID ${childId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
                }
            }
            
            // –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—É
            const group = await this.strapiService.createStationGroupWithData(name, mainStationId, childStationIds);
            console.log(`‚úÖ –ì—Ä—É–ø–ø–∞ —Å—Ç–∞–Ω—Ü–∏–π —Å–æ–∑–¥–∞–Ω–∞: ${name} (–≥–ª–∞–≤–Ω–∞—è: ${mainStation.name})`);
            
            return group;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã —Å—Ç–∞–Ω—Ü–∏–π:', error);
            throw error;
        }
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã —Å—Ç–∞–Ω—Ü–∏–π
    async updateStationGroup(id: string, updateData: Partial<StationGroup>): Promise<StationGroup> {
        try {
            const group = await this.strapiService.updateStationGroup(id, updateData);
            return group;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã —Å—Ç–∞–Ω—Ü–∏–π:', error);
            throw error;
        }
    }

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞–Ω—Ü–∏–π
    async autoMapStations(): Promise<StationMapping[]> {
        try {
            console.log('üîÑ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞–Ω—Ü–∏–π...');
            
            const allStations = await this.getAllStations();
            const api1Stations = allStations.filter(s => s.source === 'api1');
            const api2Stations = allStations.filter(s => s.source === 'api2');
            
            console.log(`üìä –°—Ç–∞–Ω—Ü–∏–π API1: ${api1Stations.length}, API2: ${api2Stations.length}`);
            
            const mappings: StationMapping[] = [];
            
            // 1. –¢–æ—á–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
            for (const api1Station of api1Stations) {
                for (const api2Station of api2Stations) {
                    if (api1Station.name.toLowerCase() === api2Station.name.toLowerCase()) {
                        const mapping = {
                            id: `mapping_${Date.now()}_${Math.random()}`,
                            api1_station_id: api1Station.id,
                            api2_station_id: api2Station.id,
                            created_date: new Date().toISOString()
                        };
                        mappings.push(mapping);
                        console.log(`‚úÖ –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ: "${api1Station.name}" <-> "${api2Station.name}"`);
                    }
                }
            }
            
            // 2. –ù–µ—á–µ—Ç–∫–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ (—Å–æ–¥–µ—Ä–∂–∏—Ç –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞)
            const usedApi1 = new Set(mappings.map(m => m.api1_station_id));
            const usedApi2 = new Set(mappings.map(m => m.api2_station_id));
            
            for (const api1Station of api1Stations) {
                if (usedApi1.has(api1Station.id)) continue;
                
                for (const api2Station of api2Stations) {
                    if (usedApi2.has(api2Station.id)) continue;
                    
                    const name1 = api1Station.name.toLowerCase().replace(/\s+/g, ' ').trim();
                    const name2 = api2Station.name.toLowerCase().replace(/\s+/g, ' ').trim();
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –æ–¥–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥—Ä—É–≥–æ–µ
                    if (name1.includes(name2) || name2.includes(name1)) {
                        const mapping = {
                            id: `mapping_${Date.now()}_${Math.random()}`,
                            api1_station_id: api1Station.id,
                            api2_station_id: api2Station.id,
                            created_date: new Date().toISOString()
                        };
                        mappings.push(mapping);
                        usedApi1.add(api1Station.id);
                        usedApi2.add(api2Station.id);
                        console.log(`üîç –ù–µ—á–µ—Ç–∫–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ: "${api1Station.name}" <-> "${api2Station.name}"`);
                        break;
                    }
                }
            }
            
            // 3. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –≤ Strapi
            for (const mapping of mappings) {
                try {
                    await this.strapiService.createStationMapping(mapping);
                    console.log(`üíæ –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ Strapi: ${mapping.api1_station_id} <-> ${mapping.api2_station_id}`);
                } catch (error) {
                    console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è:`, error);
                }
            }
            
            console.log(`üéØ –°–æ–∑–¥–∞–Ω–æ ${mappings.length} —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–π`);
            return mappings;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞–Ω—Ü–∏–π:', error);
            return [];
        }
    }

    // –†—É—á–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞–Ω—Ü–∏–π
    async createManualStationMapping(api1StationId: string, api2StationId: string): Promise<StationMapping> {
        try {
            console.log(`üîó –°–æ–∑–¥–∞–Ω–∏–µ —Ä—É—á–Ω–æ–≥–æ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è: ${api1StationId} <-> ${api2StationId}`);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç–∞–Ω—Ü–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
            const allStations = await this.getAllStations();
            const api1Station = allStations.find(s => s.id === api1StationId && s.source === 'api1');
            const api2Station = allStations.find(s => s.id === api2StationId && s.source === 'api2');
            
            if (!api1Station) {
                throw new Error(`–°—Ç–∞–Ω—Ü–∏—è API1 —Å ID ${api1StationId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
            }
            if (!api2Station) {
                throw new Error(`–°—Ç–∞–Ω—Ü–∏—è API2 —Å ID ${api2StationId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –µ—â–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            const existingMappingsResponse = await this.strapiService.getStationMappings();
            const existingMappings = (existingMappingsResponse as any).data || existingMappingsResponse || [];
            
            if (!Array.isArray(existingMappings)) {
                console.warn('‚ö†Ô∏è existingMappings –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º:', typeof existingMappings, existingMappings);
                // –ï—Å–ª–∏ –Ω–µ –º–∞—Å—Å–∏–≤, —Å—á–∏—Ç–∞–µ–º —á—Ç–æ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–π –Ω–µ—Ç
            } else {
                const exists = existingMappings.some(m => 
                    m.api1_station_id === api1StationId && m.api2_station_id === api2StationId
                );
                
                if (exists) {
                    throw new Error(`–°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ ${api1StationId} <-> ${api2StationId} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
                }
            }
            
            // –°–æ–∑–¥–∞–µ–º —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
            const mapping = await this.strapiService.createManualStationMapping(api1StationId, api2StationId);
            console.log(`‚úÖ –†—É—á–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ: ${api1Station.name} <-> ${api2Station.name}`);
            
            return {
                id: mapping.id || `manual_${Date.now()}`,
                api1_station_id: api1StationId,
                api2_station_id: api2StationId,
                created_date: mapping.created_date || new Date().toISOString()
            };
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä—É—á–Ω–æ–≥–æ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è:', error);
            throw error;
        }
    }
}

