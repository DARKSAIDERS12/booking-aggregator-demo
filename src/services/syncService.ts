import StrapiService from './strapiService';
import { Api1Service } from './api1Service';
import { Api2Service } from './api2Service';

export class SyncService {
  private strapi: StrapiService;
  private api1: Api1Service;
  private api2: Api2Service;

  constructor() {
    this.strapi = new StrapiService();
    this.api1 = new Api1Service();
    this.api2 = new Api2Service();
  }

  /**
   * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å—Ç–∞–Ω—Ü–∏–π –∏–∑ API 1 (GDS)
   */
  async syncApi1Stations(): Promise<void> {
    try {
      console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Å—Ç–∞–Ω—Ü–∏–π –∏–∑ API 1 (GDS)...');
      
      // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞–Ω—Ü–∏–∏ –∏–∑ API 1
      const stations = await this.api1.getStations();
      console.log(`üìä –ü–æ–ª—É—á–µ–Ω–æ ${stations.length} —Å—Ç–∞–Ω—Ü–∏–π –∏–∑ API 1`);

      // –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å—Ç–∞–Ω—Ü–∏–∏ –∏–∑ Strapi
      const existingStations = await this.strapi.getApi1Stations();
      console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${existingStations.length} —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å—Ç–∞–Ω—Ü–∏–π –≤ Strapi`);

      let created = 0;
      let updated = 0;

      for (const station of stations) {
        try {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å—Ç–∞–Ω—Ü–∏—è
          const existingStation = existingStations.find(s => 
            s.attributes?.station_id === station.id.toString()
          );

          if (existingStation) {
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å—Ç–∞–Ω—Ü–∏—é
            await this.strapi.updateApi1Station(existingStation.id, {
              name: station.name,
              code: station.code,
              region: station.region,
              country: station.country,
              coordinates: station.latitude && station.longitude ? {
                lat: station.latitude,
                lng: station.longitude
              } : null,
              last_sync: new Date().toISOString()
            });
            updated++;
          } else {
            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å—Ç–∞–Ω—Ü–∏—é
            await this.strapi.createApi1Station({
              station_id: station.id.toString(),
              name: station.name,
              code: station.code,
              region: station.region,
              country: station.country,
              coordinates: station.latitude && station.longitude ? {
                lat: station.latitude,
                lng: station.longitude
              } : null,
              is_active: true,
              last_sync: new Date().toISOString()
            });
            created++;
          }
        } catch (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç–∞–Ω—Ü–∏–∏ ${station.name}:`, error);
        }
      }

      console.log(`‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è API 1 –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –°–æ–∑–¥–∞–Ω–æ: ${created}, –æ–±–Ω–æ–≤–ª–µ–Ω–æ: ${updated}`);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ API 1 —Å—Ç–∞–Ω—Ü–∏–π:', error);
      throw error;
    }
  }

  /**
   * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å—Ç–∞–Ω—Ü–∏–π –∏–∑ API 2 (Paybilet)
   */
  async syncApi2Stations(): Promise<void> {
    try {
      console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Å—Ç–∞–Ω—Ü–∏–π –∏–∑ API 2 (Paybilet)...');
      
      // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞–Ω—Ü–∏–∏ –∏–∑ API 2
      const stations = await this.api2.getStations();
      console.log(`üìä –ü–æ–ª—É—á–µ–Ω–æ ${stations.length} —Å—Ç–∞–Ω—Ü–∏–π –∏–∑ API 2`);

      // –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å—Ç–∞–Ω—Ü–∏–∏ –∏–∑ Strapi
      const existingStations = await this.strapi.getApi2Stations();
      console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${existingStations.length} —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å—Ç–∞–Ω—Ü–∏–π –≤ Strapi`);

      let created = 0;
      let updated = 0;

      for (const station of stations) {
        try {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å—Ç–∞–Ω—Ü–∏—è
          const existingStation = existingStations.find(s => 
            s.attributes?.station_id === station.id.toString()
          );

          if (existingStation) {
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å—Ç–∞–Ω—Ü–∏—é
            await this.strapi.updateApi2Station(existingStation.id, {
              name: station.name,
              code: station.code,
              region: station.region,
              country: station.country,
              latitude: station.latitude,
              longitude: station.longitude,
              last_sync: new Date().toISOString()
            });
            updated++;
          } else {
            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å—Ç–∞–Ω—Ü–∏—é
            await this.strapi.createApi2Station({
              station_id: station.id.toString(),
              name: station.name,
              code: station.code,
              region: station.region,
              country: station.country,
              latitude: station.latitude,
              longitude: station.longitude,
              is_active: true,
              last_sync: new Date().toISOString()
            });
            created++;
          }
        } catch (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç–∞–Ω—Ü–∏–∏ ${station.name}:`, error);
        }
      }

      console.log(`‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è API 2 –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –°–æ–∑–¥–∞–Ω–æ: ${created}, –æ–±–Ω–æ–≤–ª–µ–Ω–æ: ${updated}`);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ API 2 —Å—Ç–∞–Ω—Ü–∏–π:', error);
      throw error;
    }
  }

  /**
   * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞–Ω—Ü–∏–π
   */
  async autoMapStations(): Promise<void> {
    try {
      console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞–Ω—Ü–∏–π...');
      
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—Ç–∞–Ω—Ü–∏–∏
      const api1Stations = await this.strapi.getApi1Stations();
      const api2Stations = await this.strapi.getApi2Stations();
      
      console.log(`üìä API 1 —Å—Ç–∞–Ω—Ü–∏–π: ${api1Stations.length}, API 2 —Å—Ç–∞–Ω—Ü–∏–π: ${api2Stations.length}`);

      // –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è
      const existingMappings = await this.strapi.getStationMappings();
      console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${existingMappings.length} —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–π`);

      let created = 0;

      for (const api1Station of api1Stations) {
        const api1Name = api1Station.attributes?.name || api1Station.name;
        if (!api1Name) continue;

        // –ò—â–µ–º –ø–æ—Ö–æ–∂–∏–µ —Å—Ç–∞–Ω—Ü–∏–∏ –≤ API 2
        for (const api2Station of api2Stations) {
          const api2Name = api2Station.attributes?.name || api2Station.name;
          if (!api2Name) continue;

          // –ü—Ä–æ—Å—Ç–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
          if (this.normalizeStationName(api1Name) === this.normalizeStationName(api2Name)) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
            const existingMapping = existingMappings.find(m => 
              m.attributes?.api1_station?.id === api1Station.id &&
              m.attributes?.api2_station?.id === api2Station.id
            );

            if (!existingMapping) {
              try {
                // –°–æ–∑–¥–∞–µ–º —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
                await this.strapi.createStationMapping({
                  name: `${api1Name} ‚Üî ${api2Name}`,
                  display_name: api1Name,
                  api1_station: api1Station.id,
                  api2_station: api2Station.id,
                  is_main_station: false,
                  is_active: true,
                  mapping_type: 'automatic',
                  confidence_score: 0.8
                });
                created++;
                console.log(`‚úÖ –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ: ${api1Name} ‚Üî ${api2Name}`);
              } catch (error) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è ${api1Name} ‚Üî ${api2Name}:`, error);
              }
            }
          }
        }
      }

      console.log(`‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –°–æ–∑–¥–∞–Ω–æ: ${created} —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–π`);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞–Ω—Ü–∏–π:', error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
   */
  async syncAll(): Promise<void> {
    try {
      console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª–Ω—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é...');
      
      // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞–Ω—Ü–∏–∏
      await this.syncApi1Stations();
      await this.syncApi2Stations();
      
      // –°–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω—Ü–∏–∏
      await this.autoMapStations();
      
      console.log('‚úÖ –ü–æ–ª–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', error);
      throw error;
    }
  }

  /**
   * –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç–∞–Ω—Ü–∏–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
   */
  private normalizeStationName(name: string): string {
    return name
      .toLowerCase()
      .replace(/[—ë–µ]/g, '–µ')
      .replace(/[–π–∏]/g, '–∏')
      .replace(/[—ä—å]/g, '')
      .replace(/[^–∞-—èa-z0-9\s]/g, ' ')
      .trim()
      .replace(/\s+/g, ' ');
  }
}

export default SyncService;
