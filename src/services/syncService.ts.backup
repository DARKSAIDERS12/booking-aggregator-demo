import { Api1Service } from './api1Service';
import StrapiService from './strapiService';
import { StrapiStation, StrapiRoute } from './strapiService';
import { Station } from '../types';

export class SyncService {
  private api1Service: Api1Service;
  private strapiService: StrapiService;

  constructor() {
    this.api1Service = new Api1Service();
    this.strapiService = new StrapiService();
  }

  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å—Ç–∞–Ω—Ü–∏–π –∏–∑ GDS API –≤ Strapi
  async syncStations(): Promise<{ success: boolean; message: string; count: number }> {
    try {
      console.log('üîÑ –ù–∞—á–∏–Ω–∞—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Å—Ç–∞–Ω—Ü–∏–π...');
      
      // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞–Ω—Ü–∏–∏ –∏–∑ GDS API
      const gdsStations = await this.api1Service.getStations();
      if (!gdsStations || gdsStations.length === 0) {
        return {
          success: false,
          message: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞–Ω—Ü–∏–∏ –∏–∑ GDS API',
          count: 0
        };
      }

      // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞–Ω—Ü–∏–π –∏–∑ Strapi
      const existingStrapiStations: StrapiStation[] = [];
      const existingStationIds = new Set<string>();

      let createdCount = 0;
      let updatedCount = 0;

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —Å—Ç–∞–Ω—Ü–∏—é
      for (const gdsStation of gdsStations) {
        const stationData: Partial<StrapiStation> = {
          station_id: gdsStation.id || '',
          name: gdsStation.name || '',
          country: gdsStation.country || '–†–æ—Å—Å–∏—è',
          region: gdsStation.region || '',
          latitude: gdsStation.latitude || 0,
          longitude: gdsStation.longitude || 0,
          api_source: 'gds',
          is_active: true
        };

        if (existingStationIds.has(stationData.station_id!)) {
          // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞–Ω—Ü–∏–π
          console.log(`‚ö†Ô∏è –°—Ç–∞–Ω—Ü–∏—è ${stationData.station_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ`);
          updatedCount++;
        } else {
          // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞–Ω—Ü–∏–π
          console.log(`‚ö†Ô∏è –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞–Ω—Ü–∏–∏ ${stationData.station_id} –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ`);
          createdCount++;
        }
      }

      const message = `–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å—Ç–∞–Ω—Ü–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –°–æ–∑–¥–∞–Ω–æ: ${createdCount}, –æ–±–Ω–æ–≤–ª–µ–Ω–æ: ${updatedCount}`;
      console.log(`‚úÖ ${message}`);
      
      return {
        success: true,
        message,
        count: createdCount + updatedCount
      };

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å—Ç–∞–Ω—Ü–∏–π:', error);
      return {
        success: false,
        message: `–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: ${error}`,
        count: 0
      };
    }
  }

  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –º–∞—Ä—à—Ä—É—Ç–æ–≤ –∏–∑ GDS API –≤ Strapi
  async syncRoutes(): Promise<{ success: boolean; message: string; count: number }> {
    try {
      console.log('üîÑ –ù–∞—á–∏–Ω–∞—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –º–∞—Ä—à—Ä—É—Ç–æ–≤...');
      
      // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–æ–≤ –∏–∑ GDS API
      // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
      console.log('‚ö†Ô∏è –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –º–∞—Ä—à—Ä—É—Ç–æ–≤ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞ - –º–µ—Ç–æ–¥ getRoutes –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω');
      
      return {
        success: true,
        message: '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –º–∞—Ä—à—Ä—É—Ç–æ–≤ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞',
        count: 0
      };

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –º–∞—Ä—à—Ä—É—Ç–æ–≤:', error);
      return {
        success: false,
        message: `–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: ${error}`,
        count: 0
      };
    }
  }

  // –ü–æ–ª–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
  async fullSync(): Promise<{ success: boolean; message: string; details: any }> {
    try {
      console.log('üîÑ –ù–∞—á–∏–Ω–∞—é –ø–æ–ª–Ω—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é...');
      
      const stationsResult = await this.syncStations();
      const routesResult = await this.syncRoutes();

      const success = stationsResult.success && routesResult.success;
      const message = `–ü–æ–ª–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –°—Ç–∞–Ω—Ü–∏–∏: ${stationsResult.message}, –ú–∞—Ä—à—Ä—É—Ç—ã: ${routesResult.message}`;

      return {
        success,
        message,
        details: {
          stations: stationsResult,
          routes: routesResult
        }
      };

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', error);
      return {
        success: false,
        message: `–û—à–∏–±–∫–∞ –ø–æ–ª–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: ${error}`,
        details: { error: String(error) }
      };
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
  async getSyncStatus(): Promise<{ lastSync: Date | null; stationsCount: number; routesCount: number; ordersCount: number }> {
    try {
      const [stations, routes, orders] = await Promise.all([
        this.strapiService.getStations(),
        this.strapiService.getRoutes(),
        this.strapiService.getOrders()
      ]);

      return {
        lastSync: new Date(), // TODO: –î–æ–±–∞–≤–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        stationsCount: stations.length,
        routesCount: routes.length,
        ordersCount: orders.length
      };

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', error);
      return {
        lastSync: null,
        stationsCount: 0,
        routesCount: 0,
        ordersCount: 0
      };
    }
  }
}

export default SyncService;
