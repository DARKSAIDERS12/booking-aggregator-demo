import axios, { AxiosInstance } from 'axios';

export interface StrapiOrder {
  id?: number;
  order_number: string;
  customer_name: string;
  customer_phone?: string;
  customer_email?: string;
  status: 'pending' | 'paid' | 'canceled';
  total_amount: number;
  currency: 'RUB' | 'KZT' | 'USD';
  route: number;
  payment_id?: string;
}

export interface StrapiRoute {
  id: number;
  departure_time: string;
  arrival_time: string;
  price: number;
  currency: string;
  carrier: string;
  route_code: string;
  data_source: string;
  route_status: string;
  seats_available: number;
  from_station: number;
  to_station: number;
}

export interface StrapiStation {
  id: number;
  station_id: string;
  name: string;
  country: string;
  region?: string;
  latitude: number;
  longitude: number;
  api_source: 'gds' | 'paybilet';
  is_active: boolean;
}

export class StrapiService {
  private client: AxiosInstance;
  private baseUrl: string;
  private apiToken: string;

  constructor() {
    this.baseUrl = process.env.STRAPI_URL || 'http://localhost:1337';
    this.apiToken = process.env.STRAPI_API_TOKEN || '';
    
    this.client = axios.create({
      baseURL: this.baseUrl,
      headers: {
        'Authorization': `Bearer ${this.apiToken}`,
        'Content-Type': 'application/json'
      }
    });
  }

  // –ó–∞–∫–∞–∑—ã
  async createOrder(orderData: StrapiOrder): Promise<StrapiOrder> {
    try {
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º route_id –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è Strapi
      const strapiOrderData = {
        ...orderData,
        route: orderData.route // Strapi –æ–∂–∏–¥–∞–µ—Ç ID –º–∞—Ä—à—Ä—É—Ç–∞ –∫–∞–∫ —á–∏—Å–ª–æ
      };

      console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –≤ Strapi:', strapiOrderData);

      const response = await this.client.post('/api/orders', {
        data: strapiOrderData
      });

      console.log('‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –≤ Strapi:', response.data);
      return response.data.data;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ –≤ Strapi:', error);
      if ((error as any).response) {
        console.error('–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', (error as any).response.data);
      }
      throw error;
    }
  }

  async getOrders(): Promise<StrapiOrder[]> {
    try {
      const response = await this.client.get('/api/orders');
      return response.data.data || [];
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤ –∏–∑ Strapi:', error);
      throw error;
    }
  }

  async getOrder(id: number): Promise<StrapiOrder | null> {
    try {
      const response = await this.client.get(`/api/orders/${id}`);
      return response.data.data;
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ ${id} –∏–∑ Strapi:`, error);
      return null;
    }
  }

  async updateOrder(id: number, orderData: Partial<StrapiOrder>): Promise<StrapiOrder | null> {
    try {
      const response = await this.client.put(`/api/orders/${id}`, {
        data: orderData
      });
      return response.data.data;
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ ${id} –≤ Strapi:`, error);
      return null;
    }
  }

  // –°—Ç–∞–Ω—Ü–∏–∏
  async getStations(): Promise<StrapiStation[]> {
    try {
      const response = await this.client.get('/api/tests');
      return response.data.data || [];
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞–Ω—Ü–∏–π –∏–∑ Strapi:', error);
      throw error;
    }
  }

  async getStation(id: number): Promise<StrapiStation | null> {
    try {
      const response = await this.client.get(`/api/tests/${id}`);
      return response.data.data;
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞–Ω—Ü–∏–∏ ${id} –∏–∑ Strapi:`, error);
      return null;
    }
  }

  async createStation(stationData: StrapiStation): Promise<StrapiStation> {
    try {
      const response = await this.client.post('/api/tests', {
        data: stationData
      });
      return response.data.data;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∞–Ω—Ü–∏–∏ –≤ Strapi:', error);
      throw error;
    }
  }

  async updateStation(id: number, stationData: Partial<StrapiStation>): Promise<StrapiStation | null> {
    try {
      const response = await this.client.put(`/api/tests/${id}`, {
        data: stationData
      });
      return response.data.data;
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞–Ω—Ü–∏–∏ ${id} –≤ Strapi:`, error);
      return null;
    }
  }

  // –ú–∞—Ä—à—Ä—É—Ç—ã
  async getRoutes(): Promise<StrapiRoute[]> {
    try {
      const response = await this.client.get('/api/test2s');
      return response.data.data || [];
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–æ–≤ –∏–∑ Strapi:', error);
      throw error;
    }
  }

  async getRoute(id: number): Promise<StrapiRoute | null> {
    try {
      const response = await this.client.get(`/api/test2s/${id}`);
      return response.data.data;
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞ ${id} –∏–∑ Strapi:`, error);
      return null;
    }
  }

  async createRoute(routeData: StrapiRoute): Promise<StrapiRoute> {
    try {
      const response = await this.client.post('/api/test2s', {
        data: routeData
      });
      return response.data.data;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞ –≤ Strapi:', error);
      throw error;
    }
  }

  async updateRoute(id: number, routeData: Partial<StrapiRoute>): Promise<StrapiRoute | null> {
    try {
      const response = await this.client.put(`/api/test2s/${id}`, {
        data: routeData
      });
      return response.data.data;
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞ ${id} –≤ Strapi:`, error);
      return null;
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
  async testConnection(): Promise<boolean> {
    try {
      await this.client.get('/api/tests');
      return true;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å–æ Strapi:', error);
      return false;
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏—Å—Ç–µ–º–µ
  async getSystemInfo(): Promise<any> {
    try {
      const response = await this.client.get('/admin/information');
      return response.data;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏—Å—Ç–µ–º–µ:', error);
      return null;
    }
  }
}

export default StrapiService;
