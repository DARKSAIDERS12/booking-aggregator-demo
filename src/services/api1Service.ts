import axios from 'axios';
import * as soap from 'soap';

export class Api1Service {
  private baseUrl: string;
  private username: string;
  private password: string;
  private client: any = null;

  constructor() {
    this.baseUrl = process.env.GDS_API1_URL || 'https://cluster.avtovokzal.ru/gdstest/soap/json';
    this.username = process.env.GDS_API1_USERNAME || 'sakhbus';
    this.password = process.env.GDS_API1_PASSWORD || 'Zxvghh4567!';
    
    console.log('üîß Api1Service –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏:', {
      url: this.baseUrl,
      username: this.username,
      password: this.password ? '***' : '–Ω–µ —É–∫–∞–∑–∞–Ω'
    });
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SOAP –∫–ª–∏–µ–Ω—Ç–∞
   */
  private async getSoapClient() {
    if (!this.client) {
      try {
        console.log('üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ GDS SOAP API...');
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π WSDL —Ñ–∞–π–ª
        this.client = await soap.createClientAsync('./gds-api.wsdl');
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
        this.client.setSecurity(new soap.BasicAuthSecurity(this.username, this.password));
        
        console.log('‚úÖ SOAP –∫–ª–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω');
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è SOAP –∫–ª–∏–µ–Ω—Ç–∞:', error);
        throw error;
      }
    }
    return this.client;
  }

  /**
   * –¢–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å GDS API
   */
  async testConnection(): Promise<{ status: boolean; responseTime: number; error?: string; methods?: string[] }> {
    const startTime = Date.now();
    try {
      const client = await this.getSoapClient();
      
      // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤
      const description = client.describe();
      const methods = Object.keys(description);
      console.log('üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ç–æ–¥—ã GDS API:', methods);
      
      const responseTime = Date.now() - startTime;
      return {
        status: true,
        responseTime,
        methods
      };
    } catch (error) {
      const responseTime = Date.now() - startTime;
      console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è GDS API:', error);
      return {
        status: false,
        responseTime,
        error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
      };
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å—Ç–∞–Ω—Ü–∏–π –∏–∑ GDS API
   */
  async getStations(): Promise<any[]> {
    try {
      console.log('üöâ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞–Ω—Ü–∏–π –∏–∑ GDS API...');
      const client = await this.getSoapClient();
      
      // –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–∞–Ω—ã –∏ —Ä–µ–≥–∏–æ–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å—Ç–∞–Ω—Ü–∏–π
      const countries = await this.getCountries();
      const russia = countries.find(c => c.code === 'RU');
      
      if (!russia) {
        console.log('‚ö†Ô∏è –†–æ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–ø–∏—Å–∫–µ —Å—Ç—Ä–∞–Ω');
        return this.getMockStations();
      }
      
      // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–≥–∏–æ–Ω—ã –†–æ—Å—Å–∏–∏
      const regions = await this.getRegions(russia.id);
      console.log(`üìç –ù–∞–π–¥–µ–Ω–æ ${regions.length} —Ä–µ–≥–∏–æ–Ω–æ–≤ –†–æ—Å—Å–∏–∏`);
      
      const allStations = [];
      
      // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞–Ω—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞
      for (const region of regions.slice(0, 5)) { // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–µ—Ä–≤—ã–º–∏ 5 —Ä–µ–≥–∏–æ–Ω–∞–º–∏
        try {
          const stations = await this.getDispatchPoints(region.id);
          allStations.push(...stations);
        } catch (error) {
          console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞–Ω—Ü–∏–π –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞ ${region.name}:`, error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
        }
      }
      
      console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${allStations.length} —Å—Ç–∞–Ω—Ü–∏–π –∏–∑ GDS API`);
      return allStations;
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞–Ω—Ü–∏–π –∏–∑ GDS API:', error);
      console.log('üîÑ –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ');
      return this.getMockStations();
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å—Ç—Ä–∞–Ω
   */
  async getCountries(): Promise<any[]> {
    try {
      const client = await this.getSoapClient();
      const result = await client.getCountriesAsync({});
      return JSON.parse(result[0].return);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω:', error);
      return [];
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–æ–≤ —Å—Ç—Ä–∞–Ω—ã
   */
  async getRegions(countryId: number): Promise<any[]> {
    try {
      const client = await this.getSoapClient();
      const result = await client.getRegionsAsync({ countryId });
      return JSON.parse(result[0].return);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–≥–∏–æ–Ω–æ–≤:', error);
      return [];
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞–Ω—Ü–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ–≥–∏–æ–Ω–∞
   */
  async getDispatchPoints(regionId: number): Promise<any[]> {
    try {
      const client = await this.getSoapClient();
      const result = await client.getDispatchPointsAsync({ regionId });
      const stations = JSON.parse(result[0].return);
      
      return stations.map((station: any) => ({
        id: `gds_${station.id}`,
        name: station.name,
        code: station.code || station.id,
        city: station.name,
        region: station.region || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
        country: '–†–æ—Å—Å–∏—è',
        coordinates: {
          lat: station.latitude || 0,
          lng: station.longitude || 0
        },
        source: 'api1',
        sourceId: `api1_${station.id}`
      }));
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞–Ω—Ü–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è:', error);
      return [];
    }
  }

  /**
   * –ü–æ–∏—Å–∫ —Ä–µ–π—Å–æ–≤ –≤ GDS API
   */
  async searchRaces(params: { from: string; to: string; date: string }): Promise<any[]> {
    try {
      console.log('üîç –ü–æ–∏—Å–∫ —Ä–µ–π—Å–æ–≤ –≤ GDS API:', params);
      const client = await this.getSoapClient();
      
      // –î–ª—è –ø–æ–∏—Å–∫–∞ —Ä–µ–π—Å–æ–≤ –Ω—É–∂–Ω—ã ID —Å—Ç–∞–Ω—Ü–∏–π
      // –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ ID
      const result = await client.getRacesAsync({
        dispatchPlaceId: 1,
        arrivalPlaceId: 2,
        date: params.date
      });
      
      const races = JSON.parse(result[0].return);
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${races.length} —Ä–µ–π—Å–æ–≤ –≤ GDS API`);
      
      return races.map((race: any) => ({
        id: `gds_${race.uid || race.id || Date.now()}`,
        from: params.from,
        to: params.to,
        departureTime: race.dispatchDate || params.date + 'T08:00:00',
        arrivalTime: race.arrivalDate || params.date + 'T10:30:00',
        duration: race.duration || '2—á 30–º',
        price: race.price || 0,
        currency: 'RUB',
        availableSeats: race.freeSeatCount || 0,
        carrier: race.carrier || 'GDS Bus Company',
        source: 'GDS API 1'
      }));
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ä–µ–π—Å–æ–≤ –≤ GDS API:', error);
      console.log('üîÑ –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ');
      return this.getMockRaces(params);
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ–π—Å–µ
   */
  async getRaceInfo(raceId: string): Promise<any> {
    try {
      console.log('üìã –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ–π—Å–µ –∏–∑ GDS API:', raceId);
      const client = await this.getSoapClient();
      
      const result = await client.getRaceAsync({ raceCode: raceId });
      const race = JSON.parse(result[0].return);
      
      return {
        id: raceId,
        from: race.dispatchStation || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
        to: race.arrivalStation || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
        departureTime: race.dispatchDate || new Date().toISOString(),
        arrivalTime: race.arrivalDate || new Date().toISOString(),
        duration: race.duration || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
        price: race.price || 0,
        currency: 'RUB',
        availableSeats: race.freeSeatCount || 0,
        carrier: race.carrier || 'GDS Bus Company',
        source: 'GDS API 1'
      };
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ–π—Å–µ –∏–∑ GDS API:', error);
      console.log('üîÑ –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ');
      return this.getMockRaceInfo(raceId);
    }
  }

  // –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è fallback
  private getMockStations(): any[] {
    return [
      {
        id: 'gds_1',
        name: '–Æ–∂–Ω–æ-–°–∞—Ö–∞–ª–∏–Ω—Å–∫',
        code: 'YSS',
        city: '–Æ–∂–Ω–æ-–°–∞—Ö–∞–ª–∏–Ω—Å–∫',
        region: '–°–∞—Ö–∞–ª–∏–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å',
        country: '–†–æ—Å—Å–∏—è',
        coordinates: { lat: 46.9641, lng: 142.7380 },
        source: 'api1',
        sourceId: 'api1_gds_1'
      },
      {
        id: 'gds_2',
        name: '–•–æ–ª–º—Å–∫',
        code: 'KHM',
        city: '–•–æ–ª–º—Å–∫',
        region: '–°–∞—Ö–∞–ª–∏–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å',
        country: '–†–æ—Å—Å–∏—è',
        coordinates: { lat: 47.0406, lng: 142.0416 },
        source: 'api1',
        sourceId: 'api1_gds_2'
      }
    ];
  }

  private getMockRaces(params: { from: string; to: string; date: string }): any[] {
    return [
      {
        id: `gds_${Date.now()}_1`,
        from: params.from || '–Æ–∂–Ω–æ-–°–∞—Ö–∞–ª–∏–Ω—Å–∫',
        to: params.to || '–•–æ–ª–º—Å–∫',
        departureTime: `${params.date}T08:00:00`,
        arrivalTime: `${params.date}T10:30:00`,
        duration: '2—á 30–º',
        price: 1200,
        currency: 'RUB',
        availableSeats: 15,
        carrier: 'GDS Bus Company',
        source: 'GDS API 1'
      }
    ];
  }

  private getMockRaceInfo(raceId: string): any {
    return {
      id: raceId,
      from: '–Æ–∂–Ω–æ-–°–∞—Ö–∞–ª–∏–Ω—Å–∫',
      to: '–•–æ–ª–º—Å–∫',
      departureTime: '2025-08-22T08:00:00',
      arrivalTime: '2025-08-22T10:30:00',
      duration: '2—á 30–º',
      price: 1200,
      currency: 'RUB',
      availableSeats: 15,
      carrier: 'GDS Bus Company',
      source: 'GDS API 1'
    };
  }
}
