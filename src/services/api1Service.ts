import { createClientAsync } from 'soap';
import { Station, Route } from '../types';

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è GDS API 1.14
interface GdsPoint {
  id: number;
  name: string;
  address: string;
  region: string;
  latitude?: number;
  longitude?: number;
}

interface GdsRace {
  uid: string;
  name: string;
  num: string;
  dispatchDate: Date;
  arrivalDate: Date;
  dispatchPointId: number;
  arrivalPointId: number;
  dispatchStationName: string;
  arrivalStationName: string;
  price: number;
  freeSeatCount: number;
  freeSeatEstimation: string;
  carrier: string;
  busInfo: string;
  status: string;
  type: string;
  depotId: number;
}

// –ù–æ–≤—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è –ù–î–° 2025
interface TicketPayment {
  type: 'FARE' | 'SUPPLIER_FEE' | 'AGENT_FEE' | 'DEDUCTION';
  name: string;
  amount: number;
  taxRate: number | null; // 5, 7, 10, 12, null (–±–µ–∑ –ù–î–°), -1 (–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ)
  relation: 'AGENT' | 'OWN';
  supplierInfo?: string;
  supplierInn?: string;
}

interface GdsTicket {
  id: number;
  uid: string;
  ticketCode: string;
  ticketNum: string;
  ticketSeries: string;
  ticketClass: string;
  ticketType: string;
  raceUid: string;
  raceNum: string;
  raceName: string;
  dispatchDate: Date;
  arrivalDate: Date;
  dispatchStation: string;
  arrivalStation: string;
  seat: string;
  platform: string;
  lastName: string;
  firstName: string;
  middleName: string;
  docType: string;
  docSeries: string;
  docNum: string;
  citizenship: string;
  gender: string;
  birthday: Date;
  price: number;
  supplierPrice: number;
  dues: number;
  vat: number;
  status: string;
  payments?: TicketPayment[];
}

interface GdsOrder {
  uid: string;
  id: number;
  reserveCode: string;
  total: number;
  status: string;
  created: Date;
  expired: Date;
  finished?: Date;
  tickets: GdsTicket[];
}

interface GdsRaceSearchParams {
  dispatchPointId: number;
  arrivalPointId: number;
  date: Date;
}

export class Api1Service {
  private client: any;
  private wsdlUrl: string;
  private username: string;
  private password: string;
  private isInitialized: boolean = false;

  constructor() {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π WSDL —Ñ–∞–π–ª –¥–ª—è –æ–±—Ö–æ–¥–∞ –ø—Ä–æ–±–ª–µ–º —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
    this.wsdlUrl = './gds_api1.wsdl';
    this.username = process.env.API1_USERNAME || '';
    this.password = process.env.API1_PASSWORD || '';
    
    console.log('üîß GDS API 1 –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:');
    console.log('   URL:', this.wsdlUrl);
    console.log('   Username:', this.username);
    console.log('   Password:', this.password ? '***' : '–Ω–µ –∑–∞–¥–∞–Ω');
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SOAP –∫–ª–∏–µ–Ω—Ç–∞
  async initialize(): Promise<boolean> {
    if (this.isInitialized) return true;

    try {
      console.log('üîå –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SOAP –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è GDS API 1...');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å WSDL
      try {
        // –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ WSDL —Ñ–∞–π–ª–∞
        this.client = await createClientAsync(this.wsdlUrl);
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–∑–æ–≤—ã–π URL –¥–ª—è SOAP –≤—ã–∑–æ–≤–æ–≤
        this.client.setEndpoint('https://cluster.avtovokzal.ru/gdstest/soap/sales');
        
        // –î–æ–±–∞–≤–ª—è–µ–º Basic Authentication –¥–ª—è SOAP –≤—ã–∑–æ–≤–æ–≤
        if (this.username && this.password) {
          // –°–æ–∑–¥–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π security –æ–±—ä–µ–∫—Ç —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
          const customSecurity = {
            addHeaders: (headers: any) => {
              headers['Authorization'] = 'Basic ' + Buffer.from(this.username + ':' + this.password).toString('base64');
            },
            toXML: () => ''
          };
          this.client.setSecurity(customSecurity);
        }
        
        this.isInitialized = true;
        console.log('‚úÖ SOAP –∫–ª–∏–µ–Ω—Ç GDS API 1 –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π');
        return true;
      } catch (wsdlError) {
        console.warn('‚ö†Ô∏è WSDL –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –æ—Ç–∫–ª—é—á–∞–µ–º GDS API 1:', (wsdlError as Error).message);
        this.isInitialized = false;
        return false;
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ SOAP –∫–ª–∏–µ–Ω—Ç–∞:', error);
      this.isInitialized = false;
      return false;
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å—Ç–∞–Ω—Ü–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è
  async getStations(): Promise<Station[]> {
    try {
      const isInitialized = await this.initialize();
      if (!isInitialized) {
        console.log('‚ö†Ô∏è GDS API 1 –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ —Å—Ç–∞–Ω—Ü–∏–π');
        return [];
      }
      
      console.log('üîç –ó–∞–ø—Ä–æ—Å —Å—Ç–∞–Ω—Ü–∏–π –∏–∑ GDS API 1...');
      
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ä–µ–≥–∏–æ–Ω—ã (regionId = 0 –¥–ª—è –≤—Å–µ—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤)
      const regionsResponse = await this.client.getRegionsAsync(0);
      console.log('üîç –û—Ç–≤–µ—Ç getRegionsAsync:', JSON.stringify(regionsResponse, null, 2));
      
      const regions = regionsResponse[0];
      console.log('üîç –†–µ–≥–∏–æ–Ω—ã:', JSON.stringify(regions, null, 2));
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞ - –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–±—ä–µ–∫—Ç —Å –ø–æ–ª–µ–º return
      let regionsArray = regions;
      if (regions && typeof regions === 'object' && regions.return) {
        regionsArray = regions.return;
        console.log('üîç –ò–∑–≤–ª–µ—á–µ–Ω—ã —Ä–µ–≥–∏–æ–Ω—ã –∏–∑ –ø–æ–ª—è return:', JSON.stringify(regionsArray, null, 2));
      }
      
      if (!regionsArray || !Array.isArray(regionsArray)) {
        console.log('‚ö†Ô∏è –†–µ–≥–∏–æ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –Ω–µ —è–≤–ª—è—é—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º');
        return [];
      }
      
      let allStations: Station[] = [];
      
      // –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞ –ø–æ–ª—É—á–∞–µ–º –ø—É–Ω–∫—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è
      for (const region of regionsArray) {
        try {
          const pointsResponse = await this.client.getDispatchPointsAsync(region.id);
          console.log(`üîç –û—Ç–≤–µ—Ç getDispatchPointsAsync –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞ ${region.id}:`, JSON.stringify(pointsResponse, null, 2));
          
          let points: any = pointsResponse[0];
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞ - –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–±—ä–µ–∫—Ç —Å –ø–æ–ª–µ–º return
          if (points && typeof points === 'object' && points.return) {
            points = points.return;
            console.log(`üîç –ò–∑–≤–ª–µ—á–µ–Ω—ã –ø—É–Ω–∫—Ç—ã –∏–∑ –ø–æ–ª—è return –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞ ${region.id}:`, JSON.stringify(points, null, 2));
          }
          
          if (points && Array.isArray(points)) {
            const stations = points.map((point: GdsPoint) => ({
              id: String(point.id),
              name: point.name,
              country: '–†–æ—Å—Å–∏—è'
            }));
            
            allStations = [...allStations, ...stations];
            console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ ${stations.length} —Å—Ç–∞–Ω—Ü–∏–π –∏–∑ —Ä–µ–≥–∏–æ–Ω–∞ ${region.id}`);
          }
        } catch (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—É–Ω–∫—Ç–æ–≤ –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞ ${region.id}:`, error);
        }
      }
      
      console.log(`üì° –ü–æ–ª—É—á–µ–Ω–æ ${allStations.length} —Å—Ç–∞–Ω—Ü–∏–π –∏–∑ GDS API 1`);
      return allStations;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞–Ω—Ü–∏–π –∏–∑ GDS API 1:', error);
      throw error;
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞–Ω—Ü–∏–π –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å—Ç–∞–Ω—Ü–∏–∏
  async getStationsFrom(fromStationId: string): Promise<Station[]> {
    try {
      const isInitialized = await this.initialize();
      if (!isInitialized) {
        console.log('‚ö†Ô∏è GDS API 1 –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ —Å—Ç–∞–Ω—Ü–∏–π –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è');
        return [];
      }
      
      console.log(`üîç –ó–∞–ø—Ä–æ—Å —Å—Ç–∞–Ω—Ü–∏–π –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ ${fromStationId} –≤ GDS API 1...`);
      
      // –ü–æ–ª—É—á–∞–µ–º –ø—É–Ω–∫—Ç—ã –ø—Ä–∏–±—ã—Ç–∏—è –¥–ª—è —Å—Ç–∞–Ω—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è
      const pointsResponse = await this.client.getArrivalPointsAsync(
        parseInt(fromStationId),
        '' // pattern - –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö
      );
      
      console.log(`üîç –û—Ç–≤–µ—Ç getArrivalPointsAsync –¥–ª—è —Å—Ç–∞–Ω—Ü–∏–∏ ${fromStationId}:`, JSON.stringify(pointsResponse, null, 2));
      
      let points: any = pointsResponse[0];
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞ - –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–±—ä–µ–∫—Ç —Å –ø–æ–ª–µ–º return
      if (points && typeof points === 'object' && points.return) {
        points = points.return;
        console.log(`üîç –ò–∑–≤–ª–µ—á–µ–Ω—ã –ø—É–Ω–∫—Ç—ã –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –ø–æ–ª—è return –¥–ª—è —Å—Ç–∞–Ω—Ü–∏–∏ ${fromStationId}:`, JSON.stringify(points, null, 2));
      }
      
      if (!points || !Array.isArray(points)) {
        console.log(`‚ö†Ô∏è –ü—É–Ω–∫—Ç—ã –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –Ω–µ —è–≤–ª—è—é—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º –¥–ª—è —Å—Ç–∞–Ω—Ü–∏–∏ ${fromStationId}`);
        return [];
      }
      
      const stations = points.map((point: GdsPoint) => ({
        id: String(point.id),
        name: point.name,
        country: '–†–æ—Å—Å–∏—è'
      }));
      
      console.log(`üì° –ü–æ–ª—É—á–µ–Ω–æ ${stations.length} —Å—Ç–∞–Ω—Ü–∏–π –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ GDS API 1`);
      return stations;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞–Ω—Ü–∏–π –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ GDS API 1:', error);
      throw error;
    }
  }

  // –ü–æ–∏—Å–∫ —Ä–µ–π—Å–æ–≤
  async searchRoutes(params: { from: string; to: string; date: string }): Promise<Route[]> {
    try {
      const isInitialized = await this.initialize();
      if (!isInitialized) {
        console.log('‚ö†Ô∏è GDS API 1 –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ —Ä–µ–π—Å–æ–≤');
        return [];
      }
      
      console.log('üîç –ü–æ–∏—Å–∫ —Ä–µ–π—Å–æ–≤ –≤ GDS API 1:', params);
      
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç Date
      const dateParts = params.date.split('.');
      const day = parseInt(dateParts[0]);
      const month = parseInt(dateParts[1]) - 1; // –ú–µ—Å—è—Ü—ã –≤ JS –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å 0
      const year = 2000 + parseInt(dateParts[2]); // 25 -> 2025
      const searchDate = new Date(year, month, day);
      
      // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–π—Å—ã
      const racesResponse = await this.client.getRacesAsync(
        parseInt(params.from),
        parseInt(params.to),
        searchDate
      );
      
      const races: GdsRace[] = racesResponse[0];
      
      // –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä—É–µ–º –≤ –Ω–∞—à —Ñ–æ—Ä–º–∞—Ç
      const routes = races.map((race: GdsRace) => ({
        id: race.uid,
        from: {
          id: String(race.dispatchPointId),
          name: race.dispatchStationName,
          country: '–†–æ—Å—Å–∏—è'
        },
        to: {
          id: String(race.arrivalPointId),
          name: race.arrivalStationName,
          country: '–†–æ—Å—Å–∏—è'
        },
        departureTime: this.formatDate(race.dispatchDate),
        arrivalTime: this.formatDate(race.arrivalDate),
        duration: this.calculateDuration(race.dispatchDate, race.arrivalDate),
        price: race.price,
        availableSeats: race.freeSeatCount,
        carrier: race.carrier,
        vehicleType: race.busInfo || 'bus'
      }));
      
      console.log(`üì° –ù–∞–π–¥–µ–Ω–æ ${routes.length} —Ä–µ–π—Å–æ–≤ –≤ GDS API 1`);
      return routes;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ä–µ–π—Å–æ–≤ –≤ GDS API 1:', error);
      throw error;
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ–π—Å–µ
  async getRouteInfo(routeId: string): Promise<Route> {
    try {
      await this.initialize();
      
      console.log(`üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ–π—Å–µ ${routeId} –∏–∑ GDS API 1...`);
      
      const raceResponse = await this.client.getRaceAsync(routeId);
      const race: GdsRace = raceResponse[0];
      
      const route: Route = {
        id: race.uid,
        from: {
          id: String(race.dispatchPointId),
          name: race.dispatchStationName,
          country: '–†–æ—Å—Å–∏—è'
        },
        to: {
          id: String(race.arrivalPointId),
          name: race.arrivalStationName,
          country: '–†–æ—Å—Å–∏—è'
        },
        departureTime: this.formatDate(race.dispatchDate),
        arrivalTime: this.formatDate(race.arrivalDate),
        duration: this.calculateDuration(race.dispatchDate, race.arrivalDate),
        price: race.price,
        availableSeats: race.freeSeatCount,
        carrier: race.carrier,
        vehicleType: race.busInfo || 'bus'
      };
      
      console.log('üì° –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–π—Å–µ –ø–æ–ª—É—á–µ–Ω–∞ –∏–∑ GDS API 1');
      return route;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ–π—Å–µ –∏–∑ GDS API 1:', error);
      throw error;
    }
  }

  // –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞
  async bookOrder(raceUid: string, passengers: any[]): Promise<GdsOrder> {
    try {
      await this.initialize();
      
      console.log(`üîí –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –¥–ª—è —Ä–µ–π—Å–∞ ${raceUid} –≤ GDS API 1...`);
      
      // –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç GDS
      const sales = passengers.map(passenger => ({
        firstName: passenger.firstName,
        lastName: passenger.lastName,
        middleName: passenger.middleName || '',
        docType: passenger.docType || '1', // 1 - –ü–∞—Å–ø–æ—Ä—Ç –†–§
        docSeries: passenger.docSeries || '',
        docNum: passenger.docNum || '',
        citizenship: passenger.citizenship || '–†–û–°–°–ò–Ø',
        gender: passenger.gender || 'M',
        birthday: passenger.birthday || new Date(),
        seat: passenger.seat || '',
        email: passenger.email || '',
        phone: passenger.phone || ''
      }));
      
      const orderResponse = await this.client.bookOrderAsync(raceUid, sales);
      const order: GdsOrder = orderResponse[0];
      
      console.log(`‚úÖ –ó–∞–∫–∞–∑ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω –≤ GDS API 1. –ö–æ–¥: ${order.reserveCode}`);
      return order;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ –≤ GDS API 1:', error);
      throw error;
    }
  }

  // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
  async confirmOrder(orderUid: string): Promise<GdsOrder> {
    try {
      await this.initialize();
      
      console.log(`‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ ${orderUid} –≤ GDS API 1...`);
      
      const orderResponse = await this.client.confirmOrderAsync(orderUid);
      const order: GdsOrder = orderResponse[0];
      
      console.log('‚úÖ –ó–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –≤ GDS API 1');
      return order;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –≤ GDS API 1:', error);
      throw error;
    }
  }

  // –û—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞
  async cancelOrder(orderUid: string): Promise<GdsOrder> {
    try {
      await this.initialize();
      
      console.log(`‚ùå –û—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞ ${orderUid} –≤ GDS API 1...`);
      
      const orderResponse = await this.client.cancelOrderAsync(orderUid);
      const order: GdsOrder = orderResponse[0];
      
      console.log('‚úÖ –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω –≤ GDS API 1');
      return order;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞ –≤ GDS API 1:', error);
      throw error;
    }
  }

  // –û—Ç–º–µ–Ω–∞ –±–∏–ª–µ—Ç–∞
  async cancelTicket(ticketId: number): Promise<GdsTicket> {
    try {
      await this.initialize();
      
      console.log(`üîÑ –û—Ç–º–µ–Ω–∞ –±–∏–ª–µ—Ç–∞ ${ticketId} –≤ GDS API 1...`);
      
      const ticketResponse = await this.client.cancelTicketAsync(ticketId);
      const ticket: GdsTicket = ticketResponse[0];
      
      console.log(`‚úÖ –ë–∏–ª–µ—Ç –æ—Ç–º–µ–Ω–µ–Ω –≤ GDS API 1. –°—É–º–º–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞: ${ticket.vat || 0} —Ä—É–±.`);
      return ticket;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –±–∏–ª–µ—Ç–∞ –≤ GDS API 1:', error);
      throw error;
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–∫–∞–∑–µ
  async getOrder(orderId: number): Promise<GdsOrder> {
    try {
      await this.initialize();
      
      console.log(`üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–∫–∞–∑–µ ${orderId} –∏–∑ GDS API 1...`);
      
      const orderResponse = await this.client.getOrderAsync(orderId);
      const order: GdsOrder = orderResponse[0];
      
      console.log('üì° –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ –ø–æ–ª—É—á–µ–Ω–∞ –∏–∑ GDS API 1');
      return order;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–∫–∞–∑–µ –∏–∑ GDS API 1:', error);
      throw error;
    }
  }

  // –í–æ–∑–≤—Ä–∞—Ç –±–∏–ª–µ—Ç–∞
  async returnTicket(ticketId: number): Promise<GdsTicket> {
    try {
      await this.initialize();
      
      console.log(`üîÑ –í–æ–∑–≤—Ä–∞—Ç –±–∏–ª–µ—Ç–∞ ${ticketId} –≤ GDS API 1...`);
      
      const ticketResponse = await this.client.returnTicketAsync(ticketId);
      const ticket: GdsTicket = ticketResponse[0];
      
      console.log(`‚úÖ –ë–∏–ª–µ—Ç –≤–æ–∑–≤—Ä–∞—â–µ–Ω –≤ GDS API 1. –°—É–º–º–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞: ${ticket.vat || 0} —Ä—É–±.`);
      return ticket;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –±–∏–ª–µ—Ç–∞ –≤ GDS API 1:', error);
      throw error;
    }
  }

  // –¢–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
  async testConnection(): Promise<boolean> {
    try {
      await this.initialize();
      
      const response = await this.client.echoAsync('test');
      const result = response[0];
      
      console.log('‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å GDS API 1 —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
      return result === 'test';
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å GDS API 1:', error);
      return false;
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞
  async getVersion(): Promise<string> {
    try {
      await this.initialize();
      
      const response = await this.client.getVersionAsync();
      return response[0];
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–µ—Ä—Å–∏–∏ GDS API 1:', error);
      throw error;
    }
  }

  // –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  private formatDate(date: Date): string {
    if (!date) return '';
    
    try {
      const d = new Date(date);
      return d.toLocaleString('ru-RU', {
        year: 'numeric',
        month: '2-digit',
        day: '2-digit',
        hour: '2-digit',
        minute: '2-digit'
      });
    } catch {
      return String(date);
    }
  }

  private calculateDuration(departure: Date, arrival: Date): string {
    if (!departure || !arrival) return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    
    try {
      const dep = new Date(departure);
      const arr = new Date(arrival);
      const diff = arr.getTime() - dep.getTime();
      const hours = Math.floor(diff / (1000 * 60 * 60));
      const minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60));
      return `${hours}—á ${minutes}–º`;
    } catch {
      return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    }
  }
}
