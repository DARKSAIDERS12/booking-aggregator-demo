import StrapiService from './strapiService';

export interface StationGroup {
  id?: number;
  name: string;
  main_station?: number;
  stations?: number[];
  is_active: boolean;
}

export interface StationMapping {
  id?: number;
  name: string;
  display_name: string;
  api1_station?: number;
  api2_station?: number;
  group?: number;
  is_main_station?: boolean;
  is_active?: boolean;
  mapping_type?: 'automatic' | 'manual';
  confidence_score?: number;
}

export class StationGroupingService {
  private strapiService: StrapiService;

  constructor(strapiService: StrapiService) {
    this.strapiService = strapiService;
  }

  /**
   * –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —Å—Ç–∞–Ω—Ü–∏–π –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
   */
  async groupStationsByName(): Promise<StationGroup[]> {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—Ç–∞–Ω—Ü–∏–∏ –∏–∑ API 1 –∏ API 2
      const api1Stations = await this.strapiService.getApi1Stations();
      const api2Stations = await this.strapiService.getApi2Stations();

      // –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—ã –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
      const groups: { [key: string]: StationGroup } = {};

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º API 1 —Å—Ç–∞–Ω—Ü–∏–∏
      for (const station of api1Stations) {
        const stationName = station.attributes?.name || station.name;
        if (!stationName) continue;

        const normalizedName = this.normalizeStationName(stationName);
        
        if (!groups[normalizedName]) {
          groups[normalizedName] = {
            name: stationName,
            is_active: true,
            stations: []
          };
        }

        // –°–æ–∑–¥–∞–µ–º —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è API 1 —Å—Ç–∞–Ω—Ü–∏–∏
        const mapping = await this.strapiService.createStationMapping({
          name: stationName,
          display_name: stationName,
          api1_station: station.id,
          is_main_station: false,
          is_active: true,
          mapping_type: 'automatic',
          confidence_score: 0.8
        });

        if (mapping && mapping.id) {
          groups[normalizedName].stations = groups[normalizedName].stations || [];
          groups[normalizedName].stations!.push(mapping.id);
        }
      }

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º API 2 —Å—Ç–∞–Ω—Ü–∏–∏
      for (const station of api2Stations) {
        const stationName = station.attributes?.name || station.name;
        if (!stationName) continue;

        const normalizedName = this.normalizeStationName(stationName);
        
        if (!groups[normalizedName]) {
          groups[normalizedName] = {
            name: stationName,
            is_active: true,
            stations: []
          };
        }

        // –°–æ–∑–¥–∞–µ–º —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è API 2 —Å—Ç–∞–Ω—Ü–∏–∏
        const mapping = await this.strapiService.createStationMapping({
          name: stationName,
          display_name: stationName,
          api2_station: station.id,
          is_main_station: false,
          is_active: true,
          mapping_type: 'automatic',
          confidence_score: 0.8
        });

        if (mapping && mapping.id) {
          groups[normalizedName].stations = groups[normalizedName].stations || [];
          groups[normalizedName].stations!.push(mapping.id);
        }
      }

      // –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—ã –≤ Strapi
      const createdGroups: StationGroup[] = [];
      for (const groupName in groups) {
        const group = groups[groupName];
        if (group.stations && group.stations.length > 0) {
          // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥–ª–∞–≤–Ω—É—é —Å—Ç–∞–Ω—Ü–∏—é (–ø–µ—Ä–≤—É—é –≤ —Å–ø–∏—Å–∫–µ)
          group.main_station = group.stations[0];
          
          const createdGroup = await this.strapiService.createStationGroup(group);
          if (createdGroup) {
            createdGroups.push(createdGroup);
          }
        }
      }

      return createdGroups;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ —Å—Ç–∞–Ω—Ü–∏–π –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é:', error);
      throw error;
    }
  }

  /**
   * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —Å—Ç–∞–Ω—Ü–∏–π
   */
  async autoGroupStations(): Promise<StationGroup[]> {
    try {
      console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫—É —Å—Ç–∞–Ω—Ü–∏–π...');
      
      // –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –≥—Ä—É–ø–ø—ã
      const existingGroups = await this.strapiService.getStationGroups();
      console.log(`üìä –ù–∞–π–¥–µ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –≥—Ä—É–ø–ø: ${existingGroups.length}`);

      // –í—ã–ø–æ–ª–Ω—è–µ–º –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫—É –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
      const groups = await this.groupStationsByName();
      console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ –Ω–æ–≤—ã—Ö –≥—Ä—É–ø–ø: ${groups.length}`);

      return groups;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ —Å—Ç–∞–Ω—Ü–∏–π:', error);
      throw error;
    }
  }

  /**
   * –†—É—á–Ω–∞—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —Å—Ç–∞–Ω—Ü–∏–π
   */
  async manualGroupStations(stationIds: number[], groupName: string): Promise<StationGroup> {
    try {
      console.log(`üîß –†—É—á–Ω–∞—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —Å—Ç–∞–Ω—Ü–∏–π: ${stationIds.join(', ')} –≤ –≥—Ä—É–ø–ø—É "${groupName}"`);

      // –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—É
      const group = await this.strapiService.createStationGroup({
        name: groupName,
        is_active: true,
        stations: stationIds
      });

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥–ª–∞–≤–Ω—É—é —Å—Ç–∞–Ω—Ü–∏—é (–ø–µ—Ä–≤—É—é –≤ —Å–ø–∏—Å–∫–µ)
      if (group && group.id && stationIds.length > 0) {
        await this.strapiService.updateStationGroup(group.id, {
          main_station: stationIds[0]
        });
      }

      console.log(`‚úÖ –ì—Ä—É–ø–ø–∞ "${groupName}" —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞`);
      return group;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Ä—É—á–Ω–æ–π –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ —Å—Ç–∞–Ω—Ü–∏–π:', error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ç–∞–Ω—Ü–∏–π
   */
  async getGroupedStations(): Promise<StationGroup[]> {
    try {
      return await this.strapiService.getStationGroups();
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ç–∞–Ω—Ü–∏–π:', error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π –≥—Ä—É–ø–ø—ã —Å—Ç–∞–Ω—Ü–∏–π
   */
  async getStationGroupDetails(groupId: number): Promise<StationGroup | null> {
    try {
      const groups = await this.strapiService.getStationGroups();
      return groups.find(g => g.id === groupId) || null;
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –≥—Ä—É–ø–ø—ã ${groupId}:`, error);
      return null;
    }
  }

  /**
   * –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç–∞–Ω—Ü–∏–∏ –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏
   */
  private normalizeStationName(name: string): string {
    return name
      .toLowerCase()
      .replace(/[—ë–µ]/g, '–µ')
      .replace(/[–π–∏]/g, '–∏')
      .replace(/[—ä—å]/g, '')
      .replace(/[^–∞-—èa-z0-9\s]/g, ' ')
      .trim()
      .replace(/\s+/g, ' ');
  }
}

export default StationGroupingService;
