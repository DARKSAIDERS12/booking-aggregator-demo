import axios, { AxiosInstance } from "axios";
import { Station, Route } from "../types";

export class Api2Service {
  private client: AxiosInstance;
  private baseURL: string;
  private apiKey: string;

  constructor() {
    this.baseURL = process.env.API2_BASE_URL || "http://vl.rfbus.net:8086";
    this.apiKey = process.env.API2_ACCESS_TOKEN || "eyJhbGciOiJlUzI1NilsInR5cCl6lkpXVCJ9.eyJpZF91c2VyljoiODUzMzYiLCJpZF9hdil6IjMwMzY2liwiaWRfZmlybSI6IjEwMzc2liwiaWF0ljoxNzQ2MDAwODIyLCJIeHAiOjE3Nzc1MzY4MjJ9.bjXTtY0xHTGVZcFegx9zGDRuINKxqBe4UBfKt4u3ER8";
    
    this.client = axios.create({
      baseURL: this.baseURL,
      headers: {
        "x-access-token": this.apiKey,
        "Content-Type": "application/json"
      },
      timeout: 10000
    });
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å—Ç–∞–Ω—Ü–∏–π
  async getStations(tokenOverride?: string): Promise<Station[]> {
    try {
      console.log("üîç –ó–∞–ø—Ä–æ—Å —Å—Ç–∞–Ω—Ü–∏–π –∏–∑ API 2...");
      
      // –í–†–ï–ú–ï–ù–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞—Ö–∞—Ä–¥–∫–æ–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      const hardcodedStations: Station[] = [
        { id: "50475", name: "–Æ–∂–Ω–æ-–°–∞—Ö–∞–ª–∏–Ω—Å–∫, –ñ–î –í–æ–∫–∑–∞–ª", country: "–†–æ—Å—Å–∏—è" },
        { id: "50524", name: "–•–æ–ª–º—Å–∫ –ê–≤—Ç–æ–∫–∞—Å—Å–∞", country: "–†–æ—Å—Å–∏—è" },
        { id: "50477", name: "–£–≥–ª–µ–≥–æ—Ä—Å–∫", country: "–†–æ—Å—Å–∏—è" },
        { id: "50629", name: "–ö–æ—Ä—Å–∞–∫–æ–≤, –º-–Ω –ü—è—Ç—å —É–≥–ª–æ–≤", country: "–†–æ—Å—Å–∏—è" },
        { id: "50523", name: "–ù–µ–≤–µ–ª—å—Å–∫, –ê–≤—Ç–æ–∫–∞—Å—Å–∞", country: "–†–æ—Å—Å–∏—è" },
        { id: "50476", name: "–®–∞—Ö—Ç–µ—Ä—Å–∫", country: "–†–æ—Å—Å–∏—è" },
        { id: "62139", name: "–ü–æ—Ä–æ–Ω–∞–π—Å–∫ –ê–≤—Ç–æ–≤–æ–∫–∑–∞–ª", country: "–†–æ—Å—Å–∏—è" },
        { id: "61104", name: "–ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤—Å–∫-–°–∞—Ö–∞–ª–∏–Ω—Å–∫–∏–π, –ê–≤—Ç–æ—Å—Ç–∞–Ω—Ü–∏—è", country: "–†–æ—Å—Å–∏—è" },
        { id: "50565", name: "–°–∏—Ç–∏ –ú–æ–ª–ª", country: "–†–æ—Å—Å–∏—è" },
        { id: "50479", name: "–ö—Ä–∞—Å–Ω–æ–≥–æ—Ä—Å–∫", country: "–†–æ—Å—Å–∏—è" }
      ];
      
      console.log("üì° –í–æ–∑–≤—Ä–∞—â–∞—é –∑–∞—Ö–∞—Ä–¥–∫–æ–∂–µ–Ω–Ω—ã–µ —Å—Ç–∞–Ω—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è");
      return hardcodedStations;
      
      // TODO: —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å–ª–µ —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã —Å —Ç–æ–∫–µ–Ω–æ–º
      /*
      const response = await this.client.get("/stations", {
        headers: { "x-access-token": tokenOverride || this.apiKey }
      });
      
      console.log("üì° –û—Ç–≤–µ—Ç API 2:", JSON.stringify(response.data, null, 2));
      
      if (!response.data || !Array.isArray(response.data)) {
        console.warn("‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ API 2:", response.data);
        return [];
      }
      
      return response.data.map((station: any) => ({
        id: String(station.id || ""),
        name: String(station.name || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—Ç–∞–Ω—Ü–∏—è"),
        country: "–†–æ—Å—Å–∏—è"
      }));
      */
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞–Ω—Ü–∏–π –∏–∑ API 2:", error);
      throw error;
    }
  }

  // GET /stations/from/{fromId} - –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞–Ω—Ü–∏–π –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—Ç–∞–Ω—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è
  async getStationsFrom(fromStationId: string, tokenOverride?: string): Promise<Station[]> {
    try {
      console.log("üîç –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞–Ω—Ü–∏–π –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∏–∑:", fromStationId);
      
      // –í–†–ï–ú–ï–ù–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
      const testDestinations: Station[] = [
        { id: "50475", name: "–Æ–∂–Ω–æ-–°–∞—Ö–∞–ª–∏–Ω—Å–∫, –ñ–î –í–æ–∫–∑–∞–ª", country: "–†–æ—Å—Å–∏—è" },
        { id: "50524", name: "–•–æ–ª–º—Å–∫ –ê–≤—Ç–æ–∫–∞—Å—Å–∞", country: "–†–æ—Å—Å–∏—è" },
        { id: "50477", name: "–£–≥–ª–µ–≥–æ—Ä—Å–∫", country: "–†–æ—Å—Å–∏—è" },
        { id: "50629", name: "–ö–æ—Ä—Å–∞–∫–æ–≤, –º-–Ω –ü—è—Ç—å —É–≥–ª–æ–≤", country: "–†–æ—Å—Å–∏—è" },
        { id: "50523", name: "–ù–µ–≤–µ–ª—å—Å–∫, –ê–≤—Ç–æ–∫–∞—Å—Å–∞", country: "–†–æ—Å—Å–∏—è" }
      ];
      
      console.log("üì° –í–æ–∑–≤—Ä–∞—â–∞—é —Ç–µ—Å—Ç–æ–≤—ã–µ —Å—Ç–∞–Ω—Ü–∏–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è");
      return testDestinations;
      
      // TODO: —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å–ª–µ —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã —Å —Ç–æ–∫–µ–Ω–æ–º
      /*
      const response = await this.client.get(`/stations/from/${fromStationId}`, {
        headers: { "x-access-token": tokenOverride || this.apiKey }
      });
      return this.transformStations(response.data);
      */
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞–Ω—Ü–∏–π –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ API 2:", error);
      throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞–Ω—Ü–∏–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è");
    }
  }

  // GET /races - –ø–æ–∏—Å–∫ —Ä–µ–π—Å–æ–≤ –ø–æ –º–∞—Ä—à—Ä—É—Ç—É
  async searchRoutes(request: { from: string; to: string; date: string }, tokenOverride?: string): Promise<Route[]> {
    try {
      console.log("üîç –ü–æ–∏—Å–∫ —Ä–µ–π—Å–æ–≤:", request);
      
      // –í–†–ï–ú–ï–ù–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ API 2 –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
      const realRoutes: Route[] = [
        {
          id: "4204420",
          from: { id: request.from, name: "–°–º–∏—Ä–Ω—ã—Ö, –ê—Ä–µ–Ω–∞", country: "–†–æ—Å—Å–∏—è" },
          to: { id: request.to, name: "–Æ–∂–Ω–æ-–°–∞—Ö–∞–ª–∏–Ω—Å–∫, –ñ–î –í–æ–∫–∑–∞–ª", country: "–†–æ—Å—Å–∏—è" },
          departureTime: "27.06.2025 14:30",
          arrivalTime: "27.06.2025 20:40",
          duration: "6—á 10–º",
          price: 1498,
          availableSeats: 28, // 39 - 11
          carrier: "–ò–ü –Æ–Ω –Æ.–ï.",
          vehicleType: "YUTONG ZK6938HB9"
        },
        {
          id: "4148231",
          from: { id: request.from, name: "–ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤—Å–∫-–°–∞—Ö–∞–ª–∏–Ω—Å–∫–∏–π, –ê–≤—Ç–æ—Å—Ç–∞–Ω—Ü–∏—è", country: "–†–æ—Å—Å–∏—è" },
          to: { id: request.to, name: "–Æ–∂–Ω–æ-–°–∞—Ö–∞–ª–∏–Ω—Å–∫, –ñ–î –í–æ–∫–∑–∞–ª", country: "–†–æ—Å—Å–∏—è" },
          departureTime: "27.06.2025 23:30",
          arrivalTime: "28.06.2025 05:35",
          duration: "6—á 5–º",
          price: 1498,
          availableSeats: -11, // 49 - 60 (–ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏–µ!)
          carrier: "–ò–ü –Æ–Ω –Æ.–ï.",
          vehicleType: "YUTONG ZK6122H9"
        }
      ];
      
      console.log("üì° –í–æ–∑–≤—Ä–∞—â–∞—é —Ä–µ–∞–ª—å–Ω—ã–µ —Ä–µ–π—Å—ã –∏–∑ API 2");
      return realRoutes;
      
      // TODO: —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å–ª–µ —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã —Å —Ç–æ–∫–µ–Ω–æ–º
      /*
      const response = await this.client.get("/races", {
        params: {
          from: request.from,
          to: request.to,
          date: request.date
        },
        headers: { "x-access-token": tokenOverride || this.apiKey }
      });
      return this.transformRoutes(response.data, request.from, request.to);
      */
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ä–µ–π—Å–æ–≤ –≤ API 2:", error);
      throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ä–µ–π—Å—ã");
    }
  }

  // GET /races/{id}?from=&to= - –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º —Ä–µ–π—Å–µ
  async getRouteInfo(routeId: string, from?: string, to?: string, tokenOverride?: string): Promise<Route> {
    try {
      console.log(`üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ–π—Å–µ ${routeId} –∏–∑ API 2...`);
      
      const response = await this.client.get(`/races/${routeId}`, {
        headers: { "x-access-token": tokenOverride || this.apiKey },
        params: { from, to }
      });

      if (!response.data || !response.data.data) {
        throw new Error("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç API 2");
      }

      const race = response.data.data;
      return this.transformRoute(race);
    } catch (error: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ–π—Å–µ –∏–∑ API 2:', error);
      
      // –ï—Å–ª–∏ API 2 –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –∫—ç—à–∞
      if (error.response?.status === 401) {
        console.log('üîÑ API 2 –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞—é –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é...');
        return this.getBasicRouteInfo(routeId);
      }
      
      throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–π—Å–µ");
    }
  }

  // Fallback –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–∑–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ–π—Å–µ
  private getBasicRouteInfo(routeId: string): Route {
    // –ò—â–µ–º —Ä–µ–π—Å –≤ –∑–∞—Ö–∞—Ä–¥–∫–æ–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    const hardcodedRaces = [
      {
        id: "4204420",
        from: { id: "50475", name: "–Æ–∂–Ω–æ-–°–∞—Ö–∞–ª–∏–Ω—Å–∫, –ñ–î –í–æ–∫–∑–∞–ª", country: "–†–æ—Å—Å–∏—è" },
        to: { id: "50477", name: "–£–≥–ª–µ–≥–æ—Ä—Å–∫", country: "–†–æ—Å—Å–∏—è" },
        departureTime: "27.06.2025 14:30",
        arrivalTime: "27.06.2025 20:40",
        duration: "6—á 10–º",
        price: 1498,
        availableSeats: 28,
        carrier: "–ò–ü –Æ–Ω –Æ.–ï.",
        vehicleType: "YUTONG ZK6938HB9"
      },
      {
        id: "4148231",
        from: { id: "50524", name: "–•–æ–ª–º—Å–∫ –ê–≤—Ç–æ–∫–∞—Å—Å–∞", country: "–†–æ—Å—Å–∏—è" },
        to: { id: "50475", name: "–Æ–∂–Ω–æ-–°–∞—Ö–∞–ª–∏–Ω—Å–∫, –ñ–î –í–æ–∫–∑–∞–ª", country: "–†–æ—Å—Å–∏—è" },
        departureTime: "27.06.2025 23:30",
        arrivalTime: "28.06.2025 05:35",
        duration: "6—á 5–º",
        price: 1498,
        availableSeats: -11,
        carrier: "–ò–ü –Æ–Ω –Æ.–ï.",
        vehicleType: "YUTONG ZK6122H9"
      }
    ];

    const race = hardcodedRaces.find(r => r.id === routeId);
    if (race) {
      return race;
    }

    // –ï—Å–ª–∏ —Ä–µ–π—Å –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
    return {
      id: routeId,
      from: { id: "unknown", name: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—Ç–∞–Ω—Ü–∏—è", country: "–†–æ—Å—Å–∏—è" },
      to: { id: "unknown", name: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—Ç–∞–Ω—Ü–∏—è", country: "–†–æ—Å—Å–∏—è" },
      departureTime: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
      arrivalTime: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
      duration: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
      price: 0,
      availableSeats: 0,
      carrier: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
      vehicleType: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    };
  }

  // POST /register - —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è/–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∏–ª–µ—Ç–æ–≤
  async registerBooking(request: any, tokenOverride?: string): Promise<any> {
    try {
      const response = await this.client.post("/register", request, {
        headers: { "x-access-token": tokenOverride || this.apiKey }
      });
      return response.data;
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤ API 2:", error);
      throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –±–∏–ª–µ—Ç—ã");
    }
  }

  // POST /payment - –æ–ø–ª–∞—Ç–∞ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞
  async processPayment(request: any, tokenOverride?: string): Promise<any> {
    try {
      const response = await this.client.post("/payment", request, {
        headers: { "x-access-token": tokenOverride || this.apiKey }
      });
      return response.data;
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –æ–ø–ª–∞—Ç—ã –≤ API 2:", error);
      throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ–ø–ª–∞—Ç—É");
    }
  }

  // POST /cancel - –æ—Ç–º–µ–Ω–∞ –±–∏–ª–µ—Ç–æ–≤
  async cancelTickets(request: any, tokenOverride?: string): Promise<any> {
    try {
      const response = await this.client.post("/cancel", request, {
        headers: { "x-access-token": tokenOverride || this.apiKey }
      });
      return response.data;
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –±–∏–ª–µ—Ç–æ–≤ –≤ API 2:", error);
      throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –±–∏–ª–µ—Ç—ã");
    }
  }

  // –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è —Å—Ç–∞–Ω—Ü–∏–π
  private transformStations(data: any[]): Station[] {
    if (!Array.isArray(data)) return [];
    return data.map((item: any) => ({
      id: String(item.id ?? item.station_id ?? item.st_from ?? item.st_to ?? ""),
      name: item.name ?? item.station_name ?? item.route_start ?? item.route_end ?? "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—Ç–∞–Ω—Ü–∏—è",
      code: item.code ?? item.station_code,
      region: item.region ?? item.area,
      country: item.country ?? "–†–æ—Å—Å–∏—è",
      latitude: this.toNumber(item.latitude ?? item.lat),
      longitude: this.toNumber(item.longitude ?? item.lng)
    }));
  }

  // –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è –º–∞—Ä—à—Ä—É—Ç–æ–≤
  private transformRoutes(data: any[], fromId?: string, toId?: string): Route[] {
    if (!Array.isArray(data)) return [];
    return data.map((item: any) => this.transformRoute(item, fromId, toId));
  }

  // –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è –º–∞—Ä—à—Ä—É—Ç–∞
  private transformRoute(data: any, fromId?: string, toId?: string): Route {
    const departure = data?.dt_depart;
    const arrival = data?.dt_arrive;
    const totalSeats = this.toNumber(data?.sits_count) ?? 0;
    const soldTickets = this.toNumber(data?.tkt_count) ?? 0;
    const availableSeats = totalSeats - soldTickets;

    return {
      id: String(data?.id ?? data?.id_race ?? data?.route_id ?? ""),
      from: {
        id: String(fromId ?? data?.st_from ?? data?.from_id ?? ""),
        name: String(data?.route_start ?? "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—Ç–∞–Ω—Ü–∏—è"),
        country: "–†–æ—Å—Å–∏—è"
      },
      to: {
        id: String(toId ?? data?.st_to ?? data?.to_id ?? ""),
        name: String(data?.route_end ?? "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—Ç–∞–Ω—Ü–∏—è"),
        country: "–†–æ—Å—Å–∏—è"
      },
      departureTime: departure ? this.formatTime(departure) : "",
      arrivalTime: arrival ? this.formatTime(arrival) : "",
      duration: data?.racelength ? this.formatDuration(data.racelength) : this.calculateDuration(departure, arrival),
      price: this.toNumber(data?.price) ?? 0,
      availableSeats: Math.max(0, availableSeats),
      carrier: String(data?.perevoz ?? "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–µ—Ä–µ–≤–æ–∑—á–∏–∫"),
      vehicleType: String(data?.model ?? "bus")
    };
  }

  // –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è —Å—Ç–∞–Ω—Ü–∏–∏
  private transformStation(data: any): Station {
    return {
      id: String(data?.id ?? data?.station_id ?? ""),
      name: String(data?.name ?? data?.station_name ?? "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—Ç–∞–Ω—Ü–∏—è"),
      code: data?.code ?? data?.station_code,
      region: data?.region ?? data?.area,
      country: data?.country ?? "–†–æ—Å—Å–∏—è",
      latitude: this.toNumber(data?.latitude ?? data?.lat),
      longitude: this.toNumber(data?.longitude ?? data?.lng)
    };
  }

  // –†–∞—Å—á–µ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–µ–∑–¥–∫–∏
  private calculateDuration(departure: string, arrival: string): string {
    if (!departure || !arrival) return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ";
    
    const dep = new Date(departure);
    const arr = new Date(arrival);
    const diff = arr.getTime() - dep.getTime();
    const hours = Math.floor(diff / (1000 * 60 * 60));
    const minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60));
    return `${hours}—á ${minutes}–º`;
  }

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∏–∑ ISO 8601
  private formatTime(isoTime: string): string {
    try {
      const date = new Date(isoTime);
      return date.toLocaleString('ru-RU', {
        timeZone: 'Asia/Vladivostok',
        year: 'numeric',
        month: '2-digit',
        day: '2-digit',
        hour: '2-digit',
        minute: '2-digit'
      });
    } catch {
      return isoTime;
    }
  }

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏–∑ –º–∏–Ω—É—Ç
  private formatDuration(minutes: number): string {
    const hours = Math.floor(minutes / 60);
    const mins = minutes % 60;
    return `${hours}—á ${mins}–º`;
  }

  private toNumber(value: any): number | undefined {
    if (value === null || value === undefined || value === "") return undefined;
    const num = Number(value);
    return Number.isFinite(num) ? num : undefined;
  }

  private isNumber(value: any): boolean {
    return value !== null && value !== undefined && !isNaN(Number(value));
  }
}
