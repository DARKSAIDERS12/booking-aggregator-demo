import axios from 'axios';

export class Api2Service {
  private baseUrl: string;
  private apiKey: string;

  constructor() {
    this.baseUrl = process.env.API2_BASE_URL || 'http://vl.rfbus.net:8086';
    this.apiKey = process.env.API2_API_KEY || '';
    
    console.log('üîß Api2Service –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏:', {
      baseUrl: this.baseUrl,
      apiKey: this.apiKey ? `${this.apiKey.substring(0, 20)}...` : '–Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'
    });
  }

  // –ü–æ–∏—Å–∫ —Ä–µ–π—Å–æ–≤
  async searchRaces(params: { from: string; to: string; date: string }): Promise<any[]> {
    try {
      console.log('üîç –ü–æ–∏—Å–∫ —Ä–µ–π—Å–æ–≤ –≤ Paybilet API:', params);
      
      if (!this.apiKey) {
        console.log('‚ö†Ô∏è API –∫–ª—é—á Paybilet –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
        return [];
      }

      // –†–µ–∞–ª—å–Ω—ã–π API –≤—ã–∑–æ–≤ –∫ Paybilet
      const response = await axios.get(`${this.baseUrl}/races`, {
        headers: {
          'x-access-token': this.apiKey,
          'Content-Type': 'application/json'
        },
        params: {
          from: params.from,
          to: params.to,
          date: params.date
        },
        timeout: 10000
      });

      if (response.data && response.data.success) {
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${response.data.data?.length || 0} —Ä–µ–π—Å–æ–≤ –≤ Paybilet API`);
        return response.data.data || [];
      }

      console.log('‚ö†Ô∏è Paybilet API –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç');
      return [];
      
    } catch (error: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ä–µ–π—Å–æ–≤ –≤ Paybilet API:', error.message);
      return [];
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ–π—Å–µ
  async getRaceInfo(raceId: string): Promise<any> {
    try {
      console.log('üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ–π—Å–µ –∏–∑ Paybilet API:', raceId);
      
      if (!this.apiKey) {
        console.log('‚ö†Ô∏è API –∫–ª—é—á Paybilet –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
        return null;
      }

      const response = await axios.get(`${this.baseUrl}/races/${raceId}`, {
        headers: {
          'x-access-token': this.apiKey,
          'Content-Type': 'application/json'
        },
        timeout: 10000
      });

      if (response.data && response.data.success) {
        return response.data.data;
      }

      return null;
      
    } catch (error: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ–π—Å–µ –∏–∑ Paybilet API:', error.message);
      return null;
    }
  }

        // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞–Ω—Ü–∏–π
      async getStations(): Promise<any[]> {
        try {
          console.log('üîç –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞–Ω—Ü–∏–π –∏–∑ Paybilet API');
          
          if (!this.apiKey) {
            console.log('‚ö†Ô∏è API –∫–ª—é—á Paybilet –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
            return [];
          }

          const response = await axios.get(`${this.baseUrl}/stations`, {
            headers: {
              'x-access-token': this.apiKey,
              'Content-Type': 'application/json'
            },
            timeout: 10000
          });

      if (response.data && response.data.success) {
        console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${response.data.data?.length || 0} —Å—Ç–∞–Ω—Ü–∏–π –∏–∑ Paybilet API`);
        return response.data.data || [];
      }

      return [];
      
    } catch (error: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞–Ω—Ü–∏–π –∏–∑ Paybilet API:', error.message);
      return [];
    }
  }

  // –¢–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
  async testConnection(): Promise<{ status: boolean; responseTime: number; error?: string }> {
    try {
      console.log('üîå –¢–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Paybilet API...');
      console.log('üìç URL:', this.baseUrl);
      console.log('üîë API Key:', this.apiKey ? `${this.apiKey.substring(0, 20)}...` : '–Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
      
      if (!this.apiKey) {
        return { status: false, responseTime: 0, error: 'API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω' };
      }
      
      if (!this.baseUrl) {
        return { status: false, responseTime: 0, error: 'Base URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω' };
      }
      
      const startTime = Date.now();
      
      // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Paybilet API - –ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
      let response;
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ x-access-token, –∫–∞–∫ –≤ Postman
      response = await axios.get(`${this.baseUrl}/stations`, {
        headers: {
          'x-access-token': this.apiKey,
          'Content-Type': 'application/json'
        },
        timeout: 10000
      });
      console.log('‚úÖ –£—Å–ø–µ—à–Ω–æ —Å x-access-token –∑–∞–≥–æ–ª–æ–≤–∫–æ–º');
      
      const responseTime = Date.now() - startTime;
      
      if (response.status === 200) {
        console.log('‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Paybilet API —É—Å–ø–µ—à–Ω–æ');
        return { status: true, responseTime };
      } else {
        return { status: false, responseTime, error: `HTTP ${response.status}` };
      }
      
    } catch (error: any) {
      const responseTime = 0;
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Paybilet API:', error.message);
      if (error.response) {
        console.error('üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:', error.response.status);
        console.error('üìÑ –î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞:', error.response.data);
      }
      return { 
        status: false, 
        responseTime, 
        error: error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞' 
      };
    }
  }
}
