import { Api1Service } from './api1Service';
import { Api2Service } from './api2Service';
import { Station, Route } from '../types';

// –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ç–∏–ø Route —Å –∏—Å—Ç–æ—á–Ω–∏–∫–æ–º API
type RouteWithSource = Route & { source: 'GDS API 1' | 'RF Bus API 2' };

export class AggregatorService {
  private api1: Api1Service;
  private api2: Api2Service;

  constructor() {
    this.api1 = new Api1Service();
    this.api2 = new Api2Service();
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å—Ç–∞–Ω—Ü–∏–π –∏–∑ –æ–±–æ–∏—Ö API
  async getAllStations(): Promise<Station[]> {
    try {
      console.log('üîç –ê–≥—Ä–µ–≥–∞—Ü–∏—è —Å—Ç–∞–Ω—Ü–∏–π –∏–∑ –¥–≤—É—Ö API...');
      
      const [stationsApi1, stationsApi2] = await Promise.allSettled([
        this.api1.getStations(),
        this.api2.getStations()
      ]);

      let allStations: Station[] = [];

      // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω—Ü–∏–∏ –∏–∑ API 1
      if (stationsApi1.status === 'fulfilled') {
        console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${stationsApi1.value.length} —Å—Ç–∞–Ω—Ü–∏–π –∏–∑ GDS API 1`);
        allStations.push(...stationsApi1.value);
      } else {
        console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞–Ω—Ü–∏–∏ –∏–∑ GDS API 1:', stationsApi1.reason);
      }

      // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω—Ü–∏–∏ –∏–∑ API 2
      if (stationsApi2.status === 'fulfilled') {
        console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${stationsApi2.value.length} —Å—Ç–∞–Ω—Ü–∏–π –∏–∑ RF Bus API 2`);
        allStations.push(...stationsApi2.value);
      } else {
        console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞–Ω—Ü–∏–∏ –∏–∑ RF Bus API 2:', stationsApi2.reason);
      }

      // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
      const uniqueStations = this.removeDuplicateStations(allStations);
      
      console.log(`üìä –ò—Ç–æ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å—Ç–∞–Ω—Ü–∏–π: ${uniqueStations.length}`);
      return uniqueStations;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ —Å—Ç–∞–Ω—Ü–∏–π:', error);
      throw error;
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞–Ω—Ü–∏–π –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å—Ç–∞–Ω—Ü–∏–∏
  async getStationsFrom(fromStationId: string): Promise<Station[]> {
    try {
      console.log(`üîç –ê–≥—Ä–µ–≥–∞—Ü–∏—è —Å—Ç–∞–Ω—Ü–∏–π –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ ${fromStationId}...`);
      
      const [stationsApi1, stationsApi2] = await Promise.allSettled([
        this.api1.getStationsFrom(fromStationId),
        this.api2.getStationsFrom(fromStationId)
      ]);

      let allStations: Station[] = [];

      // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω—Ü–∏–∏ –∏–∑ API 1
      if (stationsApi1.status === 'fulfilled') {
        console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${stationsApi1.value.length} —Å—Ç–∞–Ω—Ü–∏–π –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ GDS API 1`);
        allStations.push(...stationsApi1.value);
      } else {
        console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞–Ω—Ü–∏–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ GDS API 1:', stationsApi1.reason);
      }

      // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω—Ü–∏–∏ –∏–∑ API 2
      if (stationsApi2.status === 'fulfilled') {
        console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${stationsApi2.value.length} —Å—Ç–∞–Ω—Ü–∏–π –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ RF Bus API 2`);
        allStations.push(...stationsApi2.value);
      } else {
        console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞–Ω—Ü–∏–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ RF Bus API 2:', stationsApi2.reason);
      }

      // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
      const uniqueStations = this.removeDuplicateStations(allStations);
      
      console.log(`üìä –ò—Ç–æ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å—Ç–∞–Ω—Ü–∏–π –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è: ${uniqueStations.length}`);
      return uniqueStations;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ —Å—Ç–∞–Ω—Ü–∏–π –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è:', error);
      throw error;
    }
  }

  // –ü–æ–∏—Å–∫ —Ä–µ–π—Å–æ–≤ –≤ –æ–±–æ–∏—Ö API
  async searchRoutes(params: { from: string; to: string; date: string }): Promise<RouteWithSource[]> {
    try {
      console.log('üîç –ê–≥—Ä–µ–≥–∞—Ü–∏—è –ø–æ–∏—Å–∫–∞ —Ä–µ–π—Å–æ–≤ –∏–∑ –¥–≤—É—Ö API:', params);
      
      const [routesApi1, routesApi2] = await Promise.allSettled([
        this.api1.searchRoutes(params),
        this.api2.searchRoutes(params)
      ]);

      let allRoutes: RouteWithSource[] = [];

      // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–π—Å—ã –∏–∑ API 1
      if (routesApi1.status === 'fulfilled') {
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${routesApi1.value.length} —Ä–µ–π—Å–æ–≤ –≤ GDS API 1`);
        // –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ API
        const routesWithSource = routesApi1.value.map(route => ({
          ...route,
          source: 'GDS API 1' as const
        }));
        allRoutes.push(...routesWithSource);
      } else {
        console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ä–µ–π—Å—ã –≤ GDS API 1:', routesApi1.reason);
      }

      // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–π—Å—ã –∏–∑ API 2
      if (routesApi2.status === 'fulfilled') {
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${routesApi2.value.length} —Ä–µ–π—Å–æ–≤ –≤ RF Bus API 2`);
        // –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ API
        const routesWithSource = routesApi2.value.map(route => ({
          ...route,
          source: 'RF Bus API 2' as const
        }));
        allRoutes.push(...routesWithSource);
      } else {
        console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ä–µ–π—Å—ã –≤ RF Bus API 2:', routesApi2.reason);
      }

      // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã —Ä–µ–π—Å–æ–≤
      const uniqueRoutes = this.removeDuplicateRoutes(allRoutes);
      
      // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è
      const sortedRoutes = this.sortRoutesByDeparture(uniqueRoutes);
      
      console.log(`üìä –ò—Ç–æ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ä–µ–π—Å–æ–≤: ${sortedRoutes.length}`);
      return sortedRoutes;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ –ø–æ–∏—Å–∫–∞ —Ä–µ–π—Å–æ–≤:', error);
      throw error;
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ–π—Å–µ
  async getRouteInfo(routeId: string, source?: 'GDS API 1' | 'RF Bus API 2'): Promise<RouteWithSource> {
    try {
      console.log(`üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ–π—Å–µ ${routeId}...`);
      
      // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω –∏—Å—Ç–æ—á–Ω–∏–∫, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π API
      if (source === 'GDS API 1') {
        const route = await this.api1.getRouteInfo(routeId);
        return { ...route, source: 'GDS API 1' as const };
      } else if (source === 'RF Bus API 2') {
        const route = await this.api2.getRouteInfo(routeId);
        return { ...route, source: 'RF Bus API 2' as const };
      }

      // –ò–Ω–∞—á–µ –ø—Ä–æ–±—É–µ–º –æ–±–∞ API
      try {
        const route = await this.api1.getRouteInfo(routeId);
        console.log('‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–π—Å–µ –ø–æ–ª—É—á–µ–Ω–∞ –∏–∑ GDS API 1');
        return { ...route, source: 'GDS API 1' as const };
      } catch (error) {
        console.log('üîÑ –ü—Ä–æ–±—É–µ–º RF Bus API 2...');
        const route = await this.api2.getRouteInfo(routeId);
        console.log('‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–π—Å–µ –ø–æ–ª—É—á–µ–Ω–∞ –∏–∑ RF Bus API 2');
        return { ...route, source: 'RF Bus API 2' as const };
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ–π—Å–µ:', error);
      throw error;
    }
  }

  // –¢–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –æ–±–æ–∏–º–∏ API
  async testConnections(): Promise<{
    api1: boolean;
    api2: boolean;
    summary: string;
  }> {
    try {
      console.log('üîå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å API...');
      
      const [api1Result, api2Result] = await Promise.allSettled([
        this.api1.testConnection(),
        this.testApi2Connection()
      ]);

      const api1Status = api1Result.status === 'fulfilled' ? api1Result.value : false;
      const api2Status = api2Result.status === 'fulfilled' ? api2Result.value : false;

      let summary = '';
      if (api1Status && api2Status) {
        summary = '‚úÖ –û–±–∞ API –¥–æ—Å—Ç—É–ø–Ω—ã';
      } else if (api1Status) {
        summary = '‚ö†Ô∏è –¢–æ–ª—å–∫–æ GDS API 1 –¥–æ—Å—Ç—É–ø–µ–Ω';
      } else if (api2Status) {
        summary = '‚ö†Ô∏è –¢–æ–ª—å–∫–æ RF Bus API 2 –¥–æ—Å—Ç—É–ø–µ–Ω';
      } else {
        summary = '‚ùå –û–±–∞ API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã';
      }

      console.log(`üìä –°—Ç–∞—Ç—É—Å API: GDS API 1: ${api1Status ? '‚úÖ' : '‚ùå'}, RF Bus API 2: ${api2Status ? '‚úÖ' : '‚ùå'}`);
      
      return {
        api1: api1Status,
        api2: api2Status,
        summary
      };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π:', error);
      throw error;
    }
  }

  // –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ –º–µ—Ç–æ–¥—ã

  // –£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ —Å—Ç–∞–Ω—Ü–∏–π
  private removeDuplicateStations(stations: Station[]): Station[] {
    const seen = new Set<string>();
    return stations.filter(station => {
      const key = station.name.toLowerCase().trim();
      if (seen.has(key)) {
        return false;
      }
      seen.add(key);
      return true;
    });
  }

  // –£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ —Ä–µ–π—Å–æ–≤
  private removeDuplicateRoutes(routes: RouteWithSource[]): RouteWithSource[] {
    const seen = new Set<string>();
    return routes.filter(route => {
      // –°–æ–∑–¥–∞–µ–º –∫–ª—é—á –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è: –º–∞—Ä—à—Ä—É—Ç + –≤—Ä–µ–º—è + –ø–µ—Ä–µ–≤–æ–∑—á–∏–∫
      const key = `${route.from.name}-${route.to.name}-${route.departureTime}-${route.carrier}`.toLowerCase();
      if (seen.has(key)) {
        return false;
      }
      seen.add(key);
      return true;
    });
  }

  // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Ä–µ–π—Å–æ–≤ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è
  private sortRoutesByDeparture(routes: RouteWithSource[]): RouteWithSource[] {
    return routes.sort((a, b) => {
      const timeA = new Date(a.departureTime).getTime();
      const timeB = new Date(b.departureTime).getTime();
      return timeA - timeB;
    });
  }

  // –¢–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å API 2 (–∑–∞–≥–ª—É—à–∫–∞)
  private async testApi2Connection(): Promise<boolean> {
    try {
      // –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç - –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞–Ω—Ü–∏–∏
      await this.api2.getStations();
      return true;
    } catch (error) {
      return false;
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ API
  async getApiStats(): Promise<{
    totalStations: number;
    totalRoutes: number;
    api1Status: boolean;
    api2Status: boolean;
    lastUpdate: Date;
  }> {
    try {
      const connections = await this.testConnections();
      const stations = await this.getAllStations();
      
      return {
        totalStations: stations.length,
        totalRoutes: 0, // –ë—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è –ø—Ä–∏ –ø–æ–∏—Å–∫–µ
        api1Status: connections.api1,
        api2Status: connections.api2,
        lastUpdate: new Date()
      };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ API:', error);
      throw error;
    }
  }
}
