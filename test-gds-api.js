#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è GDS API 1
 * –ó–∞–ø—É—Å–∫: node test-gds-api.js
 */

const soap = require('soap');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ GDS API
const config = {
  url: 'https://cluster.avtovokzal.ru/gdstest/soap/json',
  username: 'sakhbus',
  password: 'Zxvghh4567!'
};

async function testGdsApi() {
  console.log('üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ GDS API 1...');
  console.log('üìç URL:', config.url);
  console.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', config.username);
  console.log('üîë –ü–∞—Ä–æ–ª—å:', config.password ? '***' : '–Ω–µ —É–∫–∞–∑–∞–Ω');
  console.log('');

  try {
    // –°–æ–∑–¥–∞–µ–º SOAP –∫–ª–∏–µ–Ω—Ç
    console.log('üîå –°–æ–∑–¥–∞–Ω–∏–µ SOAP –∫–ª–∏–µ–Ω—Ç–∞...');
    const client = await soap.createClientAsync(config.url);
    console.log('‚úÖ SOAP –∫–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ');

    // –î–æ–±–∞–≤–ª—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
    console.log('üîê –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏...');
    client.setSecurity(new soap.BasicAuthSecurity(config.username, config.password));
    console.log('‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞');

    // –ü–æ–ª—É—á–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ API
    console.log('üìã –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è API...');
    const description = client.describe();
    const methods = Object.keys(description);
    
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${methods.length} –º–µ—Ç–æ–¥–æ–≤:`);
    methods.forEach((method, index) => {
      console.log(`  ${index + 1}. ${method}`);
    });

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–ª—é—á–µ–≤—ã–µ –º–µ—Ç–æ–¥—ã
    console.log('');
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö –º–µ—Ç–æ–¥–æ–≤...');
    
    const keyMethods = [
      'getDispatchPoints',    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞–Ω—Ü–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è
      'getArrivalPoints',     // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞–Ω—Ü–∏–π –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
      'getRaces',            // –ü–æ–∏—Å–∫ —Ä–µ–π—Å–æ–≤
      'getRace',             // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–π—Å–µ
      'getVersion'           // –í–µ—Ä—Å–∏—è API
    ];
    
    for (const method of keyMethods) {
      if (methods.includes(method)) {
        try {
          console.log(`\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ç–æ–¥–∞: ${method}`);
          
          // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Ç–æ–¥–µ
          const methodInfo = description[method];
          console.log(`   –í—Ö–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:`, Object.keys(methodInfo.input || {}));
          
          // –ü—ã—Ç–∞–µ–º—Å—è –≤—ã–∑–≤–∞—Ç—å –º–µ—Ç–æ–¥ —Å –ø—É—Å—Ç—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
          const result = await client[method + 'Async']({});
          console.log(`   ‚úÖ –ú–µ—Ç–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ`);
          console.log(`   üìä –†–µ–∑—É–ª—å—Ç–∞—Ç:`, JSON.stringify(result, null, 2).substring(0, 300) + '...');
          
        } catch (error) {
          console.log(`   ‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:`, error.message);
        }
      } else {
        console.log(`\n‚ö†Ô∏è –ú–µ—Ç–æ–¥ ${method} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      }
    }

    console.log('');
    console.log('üéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
    console.error('üìã –î–µ—Ç–∞–ª–∏:', error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testGdsApi().catch(console.error);
